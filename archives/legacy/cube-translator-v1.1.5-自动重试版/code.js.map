{"version":3,"file":"code.js","mappings":"MAKAA,QAAQC,IAAI,0CAGZ,MAAMC,EAAiB,CACrBC,KAAM,yBACNC,GAAI,UACJ,QAAS,qBACT,QAAS,sBACTC,GAAI,WACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,UACJC,GAAI,aACJC,GAAI,UACJC,GAAI,SACJC,GAAI,QACJC,GAAI,OACJC,GAAI,aACJC,GAAI,aACJC,GAAI,QACJC,GAAI,UACJC,GAAI,UACJC,GAAI,QACJC,GAAI,UAIN,SAASC,EAAkBC,EAAcC,EAAoBC,GAoC3D,MAAO,CACLC,OAjCmB,4wBAkCnBC,KAtBiB,iDAfIzB,EAAesB,IAA8CA,QAC7DtB,EAAeuB,IAA8CA,ovBAgChEF,KAMtB,CAGA,SAASK,EAAkBL,EAAcC,EAAoBC,GAI3D,MAAO,sDAHgBvB,EAAesB,IAA8CA,QAC7DtB,EAAeuB,IAA8CA,ktCA4CpEF,oBAGlB,CAGA,MAAMM,EACJ,mBAAMC,CAAcP,EAAcC,EAAoBC,EAAoBM,EAAgBC,GACxFhC,QAAQC,IAAI,oBAAoB8B,KAAW,CAAER,OAAMC,aAAYC,eAE/D,IACE,GAAe,WAAXM,EACF,aAAaE,KAAKC,oBAAoBX,EAAMC,EAAYC,EAAYO,GAC/D,GAAe,WAAXD,EACT,aAAaE,KAAKE,oBAAoBZ,EAAMC,EAAYC,EAAYO,GAEpE,MAAM,IAAII,MAAM,uBAAuBL,IAE3C,CAAE,MAAOM,GAEP,MADArC,QAAQqC,MAAM,qBAAsBA,GAC9BA,CACR,CACF,CAEQ,yBAAMH,CAAoBX,EAAcC,EAAoBC,EAAoBO,G,kBACtF,MAAMM,EAAQN,EAAOM,OAAS,yBAK9B,IAFqBA,EAAMC,SAAS,YAEnB,CAEf,MAAMC,EAAalB,EAAkBC,EAAMC,EAAYC,GAEjDgB,QAAiBC,MAAM,6CAA8C,CACzEC,OAAQ,OACRC,QAAS,CACP,cAAiB,UAAUZ,EAAOa,SAClC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBV,MAAOA,EACPW,SAAU,CACR,CAAEC,KAAM,SAAUC,QAASX,EAAWd,QACtC,CAAEwB,KAAM,OAAQC,QAASX,EAAWb,OAEtCyB,WAAY,IACZC,YAAa,OAIjB,IAAKZ,EAASa,GAAI,CAChB,MAAMjB,QAAcI,EAASc,OAC7B,MAAM,IAAInB,MAAM,qBAAsBC,EAAMA,OAASA,EAAMA,MAAMmB,SAAYf,EAASgB,aACxF,CAEA,MACMC,EAAoD,QAAnC,EAA0B,QAA1B,EAAiB,QAAjB,EAAY,QAAZ,SADJjB,EAASc,QACAI,eAAO,eAAG,UAAE,eAAEH,eAAO,eAAEL,eAAO,eAAES,OAE5D,IAAKF,EACH,MAAM,IAAItB,MAAM,gDAGlB,OAAOsB,CACT,CAAO,CAEL,MAAMlB,EAAalB,EAAkBC,EAAMC,EAAYC,GACjDoC,EAAiB,GAAGrB,EAAWd,aAAac,EAAWb,OAEvDc,QAAiBC,MAAM,wCAAyC,CACpEC,OAAQ,OACRC,QAAS,CACP,cAAiB,UAAUZ,EAAOa,SAClC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBV,MAAOA,EACPwB,OAAQD,EACRT,WAAY,IACZC,YAAa,GACbU,KAAM,CAAC,SAAU,YAAa,gBAIlC,IAAKtB,EAASa,GAAI,CAChB,MAAMjB,QAAcI,EAASc,OAC7B,MAAM,IAAInB,MAAM,qBAAsBC,EAAMA,OAASA,EAAMA,MAAMmB,SAAYf,EAASgB,aACxF,CAEA,MACMC,EAAwC,QAAvB,EAAiB,QAAjB,EAAY,QAAZ,SADJjB,EAASc,QACAI,eAAO,eAAG,UAAE,eAAEpC,YAAI,eAAEqC,OAEhD,IAAKF,EACH,MAAM,IAAItB,MAAM,uDAGlB,OAAOsB,CACT,CACF,CAEQ,yBAAMvB,CAAoBZ,EAAcC,EAAoBC,EAAoBO,G,gBAEtF,MAAM8B,EAASlC,EAAkBL,EAAMC,EAAYC,GAE7CgB,QAAiBC,MAAM,2DAA2DV,EAAOM,6BAA6BN,EAAOa,SAAU,CAC3IF,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBE,KAAMC,KAAKC,UAAU,CACnBgB,SAAU,CAAC,CACTC,MAAO,CAAC,CACN1C,KAAMuC,MAGVI,iBAAkB,CAChBb,YAAa,IACbc,gBAAiB,IACjBC,cAAe,CAAC,IAAK,KAAM,OAC3BC,KAAM,GACNC,KAAM,QAKZ,IAAK7B,EAASa,GAAI,CAChB,MAAMjB,QAAcI,EAASc,OAC7B,MAAM,IAAInB,MAAM,qBAAsBC,EAAMA,OAASA,EAAMA,MAAMmB,SAAYf,EAASgB,aACxF,CAGA,IAAIC,EAAgE,QAA/C,EAAyC,QAAzC,EAAoC,QAApC,EAA6B,QAA7B,EAAoB,QAApB,EAAe,QAAf,SADFjB,EAASc,QACFgB,kBAAU,eAAG,UAAE,eAAEpB,eAAO,eAAEc,aAAK,eAAG,UAAE,eAAE1C,YAAI,eAAEqC,OAEtE,IAAKF,EACH,MAAM,IAAItB,MAAM,uCAWlB,OAPAsB,EAAiBA,EACdc,QAAQ,mBAAoB,IAC5BA,QAAQ,eAAgB,IACxBA,QAAQ,WAAY,IACpBA,QAAQ,wBAAyB,IACjCZ,OAEIF,CACT,CAGQ,oBAAAe,CAAqBlD,EAAcC,EAAoBC,GAC7D,OAAOG,EAAkBL,EAAMC,EAAYC,EAC7C,CAEA,oBAAMiD,CAAe3C,EAAgBC,GACnC,IAEE,aADMC,KAAKH,cAAc,QAAS,KAAM,QAASC,EAAQC,IAClD,CACT,CAAE,MAAOK,GAEP,OADArC,QAAQqC,MAAM,0BAA2BA,IAClC,CACT,CACF,EAIF,MAAMsC,EAEI,mBAAAC,CAAoBC,GAC1B,MAAMC,EAAmB,GAEzB,GAAkB,SAAdD,EAAKE,KACPD,EAAUE,KAAKH,QACV,GAAI,aAAcA,EAEvB,IAAK,MAAMI,KAASJ,EAAKK,SACvBJ,EAAUE,QAAQ/C,KAAK2C,oBAAoBK,IAI/C,OAAOH,CACT,CAEA,oBAAAK,GACE,MAAMC,EAAsB,GAG5B,IAAK,MAAMC,KAAgBC,MAAMC,YAAYC,UAC3C,GAA0B,SAAtBH,EAAaN,KAEfK,EAAaJ,KAAKK,OACb,CAEL,MAAMI,EAAqBxD,KAAK2C,oBAAoBS,GACpDD,EAAaJ,QAAQS,EACvB,CAQF,OAJwBL,EAAaM,OAAO,CAACb,EAAMc,EAAOC,IACxDA,EAAIC,UAAUC,GAAKA,EAAE9E,KAAO6D,EAAK7D,MAAQ2E,EAI7C,CAEA,gBAAAI,GACE,MAAMP,EAAYF,MAAMC,YAAYC,UAC9BV,EAAY7C,KAAKkD,uBAIvB,OAFAnF,QAAQC,IAAI,uBAAuBuF,EAAUQ,6BAA6BlB,EAAUkB,qBAE7E,CACLC,WAAYT,EAAUQ,OACtBlB,UAAWA,EAAUkB,OACrBE,QAASpB,EAAUqB,IAAItB,GAAQA,EAAK7D,IACpCoF,aAActB,EAAUqB,IAAItB,GAASA,EAAawB,YAAc,IAChEC,cAAed,EAAUW,IAAItB,IAAQ,CACnC7D,GAAI6D,EAAK7D,GACT+D,KAAMF,EAAKE,KACXwB,KAAM1B,EAAK0B,KACXC,YAAa,aAAc3B,EAAQA,EAAaK,SAASc,OAAS,KAGxE,CAEA,sBAAMS,CAAiBC,EAAgBhD,EAAwBiD,GAC7D,IAAI9B,EACJ,IACEA,EAAOS,MAAMsB,YAAYF,EAC3B,CAAE,MAAOrE,GAEPwC,EAAOS,MAAMC,YAAYsB,QAAQf,GAAKA,EAAE9E,KAAO0F,EACjD,CAEA,IAAK7B,GAAsB,SAAdA,EAAKE,KAChB,MAAM,IAAI3C,MAAM,qCAMlB,aAFMkD,MAAMwB,cAAcjC,EAAKkC,UAEvBJ,GACN,IAAK,UACH9B,EAAKwB,WAAa3C,EAClB,MACF,IAAK,eACGzB,KAAK+E,iBAAiBnC,EAAMnB,GAClC,MACF,IAAK,iBACGzB,KAAKgF,2BAA2BpC,EAAMnB,GAC5C,MACF,IAAK,gBACGzB,KAAKiF,0BAA0BrC,EAAMnB,GAC3C,MACF,QACE,MAAM,IAAItB,MAAM,qBAAqBuE,KAE3C,CAEA,sBAAMK,CAAiBG,EAAmBzD,GACxC,MAAM0D,EAAiBD,EAAaE,QACpCD,EAAef,WAAa3C,EAC5B0D,EAAeE,EAAIH,EAAaG,EAAIH,EAAaI,MAAQ,GAGzD,MAAMC,EAAQL,EAAaK,MAAMC,QAC7BD,EAAMxB,OAAS,GAAuB,UAAlBwB,EAAM,GAAGzC,OAC/ByC,EAAM,GAAKE,OAAOC,OAAO,CAAC,EAAGH,EAAM,GAAI,CACrCI,MAAO,CAAEC,EAAG,EAAGC,EAAG,GAAKC,EAAG,KAE5BX,EAAeI,MAAQA,EAE3B,CAEA,gCAAMP,CAA2BE,EAAmBzD,GAClD,MAAMsE,EAAQ1C,MAAM2C,cACpBD,EAAMzB,KAAO,oBACbyB,EAAMV,EAAIH,EAAaG,EAAIH,EAAaI,MAAQ,GAChDS,EAAME,EAAIf,EAAae,EAGvB,MAAMC,EAAgBhB,EAAaE,QACnCc,EAAcb,EAAI,EAClBa,EAAcD,EAAI,EAClBF,EAAMI,YAAYD,GAGlB,MAAME,EAAkBlB,EAAaE,QACrCgB,EAAgBhC,WAAa3C,EAC7B2E,EAAgBf,EAAI,EACpBe,EAAgBH,EAAIC,EAAcG,OAAS,GAC3CN,EAAMI,YAAYC,GAGlBL,EAAMO,OACJC,KAAKC,IAAIN,EAAcZ,MAAOc,EAAgBd,OAAS,GACvDY,EAAcG,OAASD,EAAgBC,OAAS,IAIlDN,EAAMU,YAAc,CAAC,CACnB3D,KAAM,QACN6C,MAAO,CAAEC,EAAG,IAAMC,EAAG,IAAMC,EAAG,MAElC,CAEA,+BAAMb,CAA0BC,EAAmBzD,GACjD,MAAMiF,EAAUrD,MAAMsD,aACtBD,EAAQpC,KAAO,kBAAiB,IAAIsC,MAAOC,mBAG3C,MAAMX,EAAgBhB,EAAaE,QACnCc,EAAcb,EAAI,IAClBa,EAAcD,EAAI,IAClBS,EAAQP,YAAYD,GAGpB,MAAME,EAAkBlB,EAAaE,QACrCgB,EAAgBhC,WAAa3C,EAC7B2E,EAAgBf,EAAI,IACpBe,EAAgBH,EAAIC,EAAcD,EAAIC,EAAcG,OAAS,GAC7DK,EAAQP,YAAYC,EACtB,CAEA,iBAAAU,GACE,MAAO,CAAC,QAAS,SAAU,QAAS,YACtC,EAIF,MAAMC,EAKJ,WAAAC,GAJQ,KAAAC,eAAyB,EAK/BjH,KAAKkH,kBAAoB,IAAItH,EAC7BI,KAAKmH,aAAe,IAAIzE,CAC1B,CAEA,mBAAM0E,CAAc7F,GAClBxD,QAAQC,IAAI,oBAAqBuD,EAAQuB,MAEzC,IACE,OAAQvB,EAAQuB,MACd,IAAK,gBACH,MAAO,CACLA,KAAM,iBACNuE,QAASrH,KAAKmH,aAAarD,oBAG/B,IAAK,kBACH,aAAa9D,KAAKsH,sBAEpB,IAAK,oBACH,aAAatH,KAAKuH,2BAA2BhG,EAAQ8F,SAEvD,IAAK,qBAEH,OADArH,KAAKiH,eAAgB,EACd,CAAEnE,KAAM,yBAEjB,IAAK,oBACH,aAAa9C,KAAKwH,uBAAuBjG,EAAQ8F,SAEnD,IAAK,cACH,aAAarH,KAAKyH,iBAAiBlG,EAAQ8F,SAE7C,IAAK,gBACH,aAAarH,KAAK0H,mBAAmBnG,EAAQ8F,SAE/C,IAAK,gBACH,aAAarH,KAAK2H,qBAEpB,QAEE,OADA5J,QAAQC,IAAI,wBAAyBuD,EAAQuB,MACtC,KAEb,CAAE,MAAO1C,GAEP,OADArC,QAAQqC,MAAM,0BAA2BA,GAClC,CACL0C,KAAM,QACNuE,QAAS,CAAEjH,MAAOA,EAAMmB,SAE5B,CACF,CAGQ,gCAAMgG,CAA2BF,GACvC,GAAIrH,KAAKiH,cACP,MAAM,IAAI9G,MAAM,mCAGlBH,KAAKiH,eAAgB,EACrB,MAAM,OAAEnH,EAAM,WAAEP,EAAU,WAAEC,EAAU,KAAEkF,EAAI,QAAET,EAAO,OAAElE,GAAWsH,EAC5DO,EAAiB,GACvB,IAAIC,EAAe,EACfC,EAAe,EAEnB,IACE,MAAMC,EAAehI,EAGfiI,EAAa,EACbC,EAAU,GAEhB,IAAK,IAAIC,EAAI,EAAGA,EAAIjE,EAAQF,OAAQmE,GAAKF,EACvCC,EAAQlF,KAAKkB,EAAQuB,MAAM0C,EAAGA,EAAIF,IAGpC,IAAIG,EAAiB,EAErB,IAAK,MAAMC,KAASH,EAAS,CAC3B,IAAKjI,KAAKiH,cACR,MAIF,MAAMoB,EAAgBD,EAAMlE,IAAIoE,MAAO7D,SACxBzE,KAAKuI,oBAChB9D,EAAQ3E,EAAQP,EAAYC,EAAYkF,EAAMqD,IAK5CS,QAAqBC,QAAQC,IAAIL,GAGvC,IAAK,MAAMM,KAAUH,EACnBZ,EAAQ7E,KAAK4F,GACS,YAAlBA,EAAOC,OACTf,IAEAC,IAIF9H,KAAK6I,YAAY,CACf/F,KAAM,qBACNuE,QAASsB,IAIbR,GAAkBC,EAAMrE,OAGxB/D,KAAK6I,YAAY,CACf/F,KAAM,uBACNuE,QAAS,CAAEyB,SAAWX,EAAiBlE,EAAQF,OAAU,OAIvDoE,EAAiBlE,EAAQF,cACrB,IAAI0E,QAAQM,GAAWC,WAAWD,EAAS,KAErD,CAGA,OADA/I,KAAKiH,eAAgB,EACd,CACLnE,KAAM,uBACNuE,QAAS,CACPO,UACAC,eACAC,gBAGN,CAAE,MAAO1H,GAEP,MADAJ,KAAKiH,eAAgB,EACf7G,CACR,CACF,CAGQ,yBAAMmI,CACZ9D,EACA3E,EACAP,EACAC,EACAkF,EACAqD,GAEA,IAAInF,EACJ,IACEA,EAAOS,MAAMsB,YAAYF,EAC3B,CAAE,MAAOrE,GACPwC,EAAOS,MAAMC,YAAYsB,QAAQf,GAAKA,EAAE9E,KAAO0F,EACjD,CAEA,IAAK7B,GAAsB,SAAdA,EAAKE,KAChB,MAAO,CACL2B,SACAwE,aAAc,GACdxH,eAAgB,GAChBmH,OAAQ,QACRxI,MAAO,oCACP8I,SAAS,GAIb,MAAMD,EAAerG,EAAKwB,YAAc,GAExC,IACE,MAAM3C,QAAuBzB,KAAKkH,kBAAkBrH,cAClDoJ,EACA1J,EACAC,EACAM,EACAiI,GAGIY,EAAS,CACblE,SACAwE,eACAxH,iBACAmH,OAAQ,UACRM,SAAS,GAMX,OAFAP,EAAOO,cAAgBlJ,KAAKmJ,0BAA0B1E,EAAQhD,EAAgBiD,EAAM,GAE7EiE,CAET,CAAE,MAAOvI,GACP,MAAO,CACLqE,SACAwE,eACAxH,eAAgB,GAChBmH,OAAQ,QACRxI,MAAOA,EAAMmB,QACb2H,SAAS,EAEb,CACF,CAEQ,yBAAM5B,GACZ,IAEE,MAAMnE,EAAeE,MAAMC,YAAY8F,QAAQxG,GAAsB,SAAdA,EAAKE,MAK5D,OAFAO,MAAMC,YAAYC,UAAYJ,EAEvB,CACLL,KAAM,iBACNuE,QAAS,CACPrD,WAAYb,EAAaY,OACzBlB,UAAWM,EAAaY,OACxBE,QAASd,EAAae,IAAItB,GAAQA,EAAK7D,IACvCoF,aAAchB,EAAae,IAAItB,GAAQA,EAAKwB,YAAc,KAGhE,CAAE,MAAOhE,GACP,MAAO,CACL0C,KAAM,QACNuE,QAAS,CAAEjH,MAAOA,EAAMmB,SAE5B,CACF,CAKQ,+BAAM4H,CACZ1E,EACAhD,EACAiD,EACA2E,EAAqB,EACrBC,EAAgB,KAEhB,IAAK,IAAIC,EAAU,EAAGA,GAAWF,EAAYE,IAC3C,IAGE,aAFMvJ,KAAKmH,aAAa3C,iBAAiBC,EAAQhD,EAAgBiD,GACjE3G,QAAQC,IAAI,+CAA+CuL,MACpD,CACT,CAAE,MAAOnJ,GAIP,GAHArC,QAAQyL,KAAK,wCAAwCD,KAAWF,MAAgBjJ,EAAMmB,SAGlFgI,EAAUF,EAAY,CAExB,MAAMI,EAAaH,EAAQ/C,KAAKmD,IAAI,IAAKH,EAAU,GACnDxL,QAAQC,IAAI,eAAeyL,gBACrB,IAAIhB,QAAQM,GAAWC,WAAWD,EAASU,GACnD,CACF,CAIF,OADA1L,QAAQqC,MAAM,qCAAqCiJ,eAC5C,CACT,CAEQ,4BAAM7B,CAAuBH,GACnC,IACE,MAAM6B,QAAgBlJ,KAAKmJ,0BACzB9B,EAAQ5C,OACR4C,EAAQ5F,eACR4F,EAAQ3C,KACR,GAGF,MAAO,CACL5B,KAAM,eACNuE,QAAS,CACPsC,QAAST,EACT9I,MAAO8I,EAAU,KAAO,6CAG9B,CAAE,MAAO9I,GACP,MAAO,CACL0C,KAAM,eACNuE,QAAS,CACPsC,SAAS,EACTvJ,MAAOA,EAAMmB,SAGnB,CACF,CAEQ,sBAAMkG,CAAiBJ,GAC7B,IACE,MAAMsC,QAAgB3J,KAAKkH,kBAAkBzE,eAC3C4E,EAAQvH,OACRuH,EAAQtH,QAGV,MAAO,CACL+C,KAAM,qBACNuE,QAAS,CACPvH,OAAQuH,EAAQvH,OAChB6J,UACAvJ,MAAOuJ,EAAU,KAAO,0BAG9B,CAAE,MAAOvJ,GACP,MAAO,CACL0C,KAAM,qBACNuE,QAAS,CACPvH,OAAQuH,EAAQvH,OAChB6J,SAAS,EACTvJ,MAAOA,EAAMmB,SAGnB,CACF,CAEQ,wBAAMmG,CAAmBL,GAC/B,IAkBE,OAhBIA,EAAQuC,eACJvG,MAAMwG,cAAcC,SAAS,qBAAsBzC,EAAQuC,SAI/DvC,EAAQ0C,gBACJ1G,MAAMwG,cAAcC,SAAS,iBAAkBzC,EAAQ0C,UAI3D1C,EAAQ2C,2BACJ3G,MAAMwG,cAAcC,SAAS,sBAAuBzC,EAAQ2C,qBAGpEjM,QAAQC,IAAI,+BAEL,CACL8E,KAAM,uBACNuE,QAAS,CAAEsC,SAAS,GAExB,CAAE,MAAOvJ,GAGP,OAFArC,QAAQqC,MAAM,2BAA4BA,GAEnC,CACL0C,KAAM,uBACNuE,QAAS,CACPsC,SAAS,EACTvJ,MAAOA,EAAMmB,SAGnB,CACF,CAEQ,wBAAMoG,GACZ,IAEE,MAAMiC,QAAgBvG,MAAMwG,cAAcI,SAAS,uBAAyB,CAC1EC,OAAQ,CAAEC,SAAS,EAAOvJ,OAAQ,GAAIP,MAAO,0BAC7C+J,OAAQ,CAAED,SAAS,EAAOvJ,OAAQ,GAAIP,MAAO,eAIzC0J,QAAiB1G,MAAMwG,cAAcI,SAAS,mBAAqB,CACvEI,kBAAmB,SAIfL,QAA4B3G,MAAMwG,cAAcI,SAAS,wBAA0B,GAIzF,OAFAlM,QAAQC,IAAI,gCAEL,CACL8E,KAAM,kBACNuE,QAAS,CACPuC,UACAG,WACAC,uBAGN,CAAE,MAAO5J,GAGP,OAFArC,QAAQqC,MAAM,2BAA4BA,GAEnC,CACL0C,KAAM,sBACNuE,QAAS,CAAEjH,MAAOA,EAAMmB,SAE5B,CACF,CAEQ,WAAAsH,CAAYtH,GAClB8B,MAAMiH,GAAGzB,YAAYtH,EACvB,EAIF,MAAMgJ,EAIJ,WAAAvD,GACEhH,KAAKwK,eAAiB,IAAIzD,EAC1B/G,KAAKmH,aAAe,IAAIzE,CAC1B,CAEA,gBAAM+H,GACJ1M,QAAQC,IAAI,oCAEZgC,KAAK0K,UACL1K,KAAK2K,uBACL3K,KAAK4K,sBAGL5K,KAAK6I,YAAY,CACf/F,KAAM,eACNuE,QAAS,CACPwD,QAAS,QACTtH,UAAWvD,KAAKmH,aAAarD,sBAIjC/F,QAAQC,IAAI,4CACd,CAEQ,OAAA0M,GACNrH,MAAMyH,OAAOC,SAAU,CACrBzF,MAAO,IACPe,OAAQ,IACR2E,MAAO,mBAEX,CAEQ,oBAAAL,GACNtH,MAAMiH,GAAGW,UAAY3C,MAAO/G,IAC1B,IACExD,QAAQC,IAAI,oBAAqBuD,EAAQuB,MACzC,MAAMtC,QAAiBR,KAAKwK,eAAepD,cAAc7F,GACrDf,GACFR,KAAK6I,YAAYrI,EAErB,CAAE,MAAOJ,GACPrC,QAAQqC,MAAM,0BAA2BA,GACzCJ,KAAK6I,YAAY,CACf/F,KAAM,QACNuE,QAAS,CAAEjH,MAAOA,EAAMmB,UAE5B,EAEJ,CAEQ,mBAAAqJ,GACNvH,MAAM6H,GAAG,kBAAmB,KAC1B,MAAMC,EAAgBnL,KAAKmH,aAAarD,mBACxC9D,KAAK6I,YAAY,CACf/F,KAAM,oBACNuE,QAAS8D,MAIb9H,MAAM6H,GAAG,oBAAqB,KAC5BlL,KAAK6I,YAAY,CACf/F,KAAM,eACNuE,QAAS,CACP+D,OAAQ/H,MAAMC,YAAYvE,GAC1BsM,SAAUhI,MAAMC,YAAYgB,UAKlCjB,MAAM6H,GAAG,QAAS,KAChBnN,QAAQC,IAAI,sBAEhB,CAEQ,WAAA6K,CAAYtH,GAClB8B,MAAMiH,GAAGzB,YAAYtH,GACrBxD,QAAQC,IAAI,gBAAiBuD,EAAQuB,KACvC,EAIF,MAAMwI,EAAc,CAAClL,EAAYmL,KAC/BxN,QAAQqC,MAAM,YAAYmL,KAAYnL,GAClCiD,MAAMiH,IACRjH,MAAMiH,GAAGzB,YAAY,CACnB/F,KAAM,QACNuE,QAAS,CAAEjH,MAAOA,EAAMmB,QAASgK,cAMvCjD,eAAekD,IACb,IACE,MAAMC,EAAS,IAAIlB,QACbkB,EAAOhB,YACf,CAAE,MAAOrK,GACPkL,EAAYlL,EAAO,sBACrB,CACF,CAGA,MAAMsL,EAAW,CACf,kBAAmBpD,gBACXkD,KAER,kBAAmBlD,gBACXkD,IACNxC,WAAW,KACT3F,MAAMiH,GAAGzB,YAAY,CACnB/F,KAAM,iBACNuE,QAAS,CACPvH,OAAQ,SACRP,WAAY,OACZC,WAAY,YAGf,MAEL,gBAAiB8I,gBACTkD,IACNxC,WAAW,KACT3F,MAAMiH,GAAGzB,YAAY,CAAE/F,KAAM,mBAC5B,OAKHO,MAAMsI,SAAWD,EAASrI,MAAMsI,SAClCD,EAASrI,MAAMsI,WAAWC,MAAMxL,IAC9BkL,EAAYlL,EAAO,YAAYiD,MAAMsI,aAGvCH,IAA4BI,MAAMxL,IAChCkL,EAAYlL,EAAO,qBAIvBrC,QAAQC,IAAI,4C","sources":["webpack://figma-translator-advanced/./src/main/code-optimized.ts"],"sourcesContent":["/**\n * 优化版本的Figma翻译插件主线程 - 修复翻译质量和性能问题\n * 专门针对TP-Link网络设备和智能家居产品优化\n */\n\nconsole.log('Optimized Production Plugin loading...');\n\n// TP-Link专用翻译prompt配置 - 内联以支持ES2019\nconst LANGUAGE_NAMES = {\n  auto: \"auto-detected language\",\n  en: \"English\",\n  \"zh-CN\": \"Simplified Chinese\",\n  \"zh-TW\": \"Traditional Chinese\", \n  ja: \"Japanese\",\n  ko: \"Korean\",\n  fr: \"French\",\n  de: \"German\",\n  es: \"Spanish\",\n  pt: \"Portuguese\",\n  ru: \"Russian\",\n  ar: \"Arabic\",\n  hi: \"Hindi\",\n  th: \"Thai\",\n  vi: \"Vietnamese\",\n  id: \"Indonesian\",\n  ms: \"Malay\",\n  tr: \"Turkish\",\n  it: \"Italian\",\n  nl: \"Dutch\",\n  pl: \"Polish\"\n};\n\n// OpenAI专用prompt构建函数\nfunction buildOpenAIPrompt(text: string, sourceLang: string, targetLang: string): { system: string; user: string } {\n  const sourceLanguage = LANGUAGE_NAMES[sourceLang as keyof typeof LANGUAGE_NAMES] || sourceLang;\n  const targetLanguage = LANGUAGE_NAMES[targetLang as keyof typeof LANGUAGE_NAMES] || targetLang;\n\n  const systemPrompt = `You are a professional translator specializing in networking and smart home device interfaces. You translate UI elements for TP-Link products including routers, switches, access points, smart plugs, cameras, and IoT devices.\n\nCRITICAL TRANSLATION RULES:\n1. NEVER add quotes, brackets, or any extra formatting around the translation\n2. Output ONLY the translated text, nothing else\n3. Maintain exact formatting, capitalization patterns, and punctuation\n4. Preserve technical terms, model numbers, and brand names\n5. Keep all symbols, special characters, and spacing identical\n6. Translate UI labels using standard industry terminology\n7. For networking terms, use established Chinese technical vocabulary\n8. For smart home features, use commonly accepted Chinese terms`;\n\n  const userPrompt = `Translate this TP-Link interface element from ${sourceLanguage} to ${targetLanguage}.\n\nContext: This is UI text from TP-Link networking/smart home products (routers, switches, smart devices, mobile apps, web interfaces).\n\nFORMATTING RULES:\n- Preserve ALL original formatting exactly\n- Keep currency symbols unchanged (¥ → ¥, $ → $, € → €)\n- Keep numbers, IPs, MACs, model numbers exactly as-is\n- Maintain punctuation, spacing, and special characters\n- Preserve button/menu capitalization patterns\n- Keep technical abbreviations (WiFi, LED, USB, etc.)\n\nTERMINOLOGY GUIDELINES:\n- Use standard networking terminology (路由器, 交换机, 接入点)\n- Use established smart home terms (智能插座, 智能摄像头)\n- Keep brand/product names in English (TP-Link, Archer, Deco)\n- Use professional technical language, not casual terms\n\nText to translate: \"${text}\"`;\n\n  return {\n    system: systemPrompt,\n    user: userPrompt\n  };\n}\n\n// Gemini专用prompt构建函数\nfunction buildGeminiPrompt(text: string, sourceLang: string, targetLang: string): string {\n  const sourceLanguage = LANGUAGE_NAMES[sourceLang as keyof typeof LANGUAGE_NAMES] || sourceLang;\n  const targetLanguage = LANGUAGE_NAMES[targetLang as keyof typeof LANGUAGE_NAMES] || targetLang;\n\n  return `Translate this TP-Link product interface text from ${sourceLanguage} to ${targetLanguage}.\n\nCONTEXT: TP-Link networking and smart home device UI translation\n- Products: Routers, switches, access points, smart plugs, cameras, IoT devices\n- Interfaces: Mobile apps, web management panels, device displays\n\nCRITICAL OUTPUT RULES:\n✓ Output ONLY the translated text\n✗ DO NOT add quotes, brackets, or extra formatting\n✗ DO NOT add explanations or notes\n✗ DO NOT repeat the original text\n\nFORMATTING PRESERVATION:\n- Keep exact spacing, punctuation, and capitalization\n- Preserve numbers, IPs, model codes unchanged\n- Maintain currency symbols (¥ stays ¥, $ stays $)\n- Keep technical abbreviations (WiFi, USB, LED, etc.)\n- Preserve special characters and symbols\n\nNETWORKING TERMINOLOGY (English → Chinese):\n- Router → 路由器\n- Switch → 交换机  \n- Access Point → 接入点\n- WiFi → WiFi (keep as-is)\n- Ethernet → 以太网\n- Bandwidth → 带宽\n- Firewall → 防火墙\n- Port → 端口\n- Signal → 信号\n\nSMART HOME TERMINOLOGY:\n- Smart Plug → 智能插座\n- Smart Camera → 智能摄像头\n- Smart Switch → 智能开关\n- Motion Detection → 动作检测\n- Night Vision → 夜视功能\n- Remote Control → 远程控制\n\nBRAND/PRODUCT PRESERVATION:\n- Keep \"TP-Link\", \"Archer\", \"Deco\", \"Tapo\" in English\n- Keep model numbers unchanged (e.g., \"AC1900\", \"AX6000\")\n\nOriginal text: \"${text}\"\n\nTranslation:`;\n}\n\n// 翻译引擎类 - 优化的Prompt和错误处理\nclass OptimizedTranslationEngine {\n  async translateText(text: string, sourceLang: string, targetLang: string, engine: string, config: any): Promise<string> {\n    console.log(`Translating with ${engine}:`, { text, sourceLang, targetLang });\n    \n    try {\n      if (engine === 'openai') {\n        return await this.translateWithOpenAI(text, sourceLang, targetLang, config);\n      } else if (engine === 'gemini') {\n        return await this.translateWithGemini(text, sourceLang, targetLang, config);\n      } else {\n        throw new Error(`Unsupported engine: ${engine}`);\n      }\n    } catch (error) {\n      console.error('Translation error:', error);\n      throw error;\n    }\n  }\n\n  private async translateWithOpenAI(text: string, sourceLang: string, targetLang: string, config: any): Promise<string> {\n    const model = config.model || 'gpt-3.5-turbo-instruct';\n    \n    // 判断是否为聊天模型或指令模型\n    const isChatModel = !model.includes('instruct');\n    \n    if (isChatModel) {\n      // 使用Chat Completions API用于GPT-4和gpt-3.5-turbo等模型\n      const promptData = buildOpenAIPrompt(text, sourceLang, targetLang);\n      \n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${config.apiKey}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          model: model,\n          messages: [\n            { role: 'system', content: promptData.system },\n            { role: 'user', content: promptData.user }\n          ],\n          max_tokens: 500,\n          temperature: 0.1\n        })\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(`OpenAI API error: ${(error.error && error.error.message) || response.statusText}`);\n      }\n\n      const data = await response.json();\n      const translatedText = data.choices?.[0]?.message?.content?.trim();\n      \n      if (!translatedText) {\n        throw new Error('No translation returned from OpenAI Chat API');\n      }\n\n      return translatedText;\n    } else {\n      // 使用传统Completions API用于instruct模型\n      const promptData = buildOpenAIPrompt(text, sourceLang, targetLang);\n      const combinedPrompt = `${promptData.system}\\n\\n${promptData.user}`;\n      \n      const response = await fetch('https://api.openai.com/v1/completions', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${config.apiKey}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          model: model,\n          prompt: combinedPrompt,\n          max_tokens: 500,\n          temperature: 0.1,\n          stop: ['\\\\n\\\\n', 'Original:', 'Context:']\n        })\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(`OpenAI API error: ${(error.error && error.error.message) || response.statusText}`);\n      }\n\n      const data = await response.json();\n      const translatedText = data.choices?.[0]?.text?.trim();\n      \n      if (!translatedText) {\n        throw new Error('No translation returned from OpenAI Completions API');\n      }\n\n      return translatedText;\n    }\n  }\n\n  private async translateWithGemini(text: string, sourceLang: string, targetLang: string, config: any): Promise<string> {\n    // 使用TP-Link优化的Gemini prompt\n    const prompt = buildGeminiPrompt(text, sourceLang, targetLang);\n    \n    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${config.model}:generateContent?key=${config.apiKey}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        contents: [{\n          parts: [{\n            text: prompt\n          }]\n        }],\n        generationConfig: {\n          temperature: 0.05, // 更低温度减少随机性，避免引号问题\n          maxOutputTokens: 500,\n          stopSequences: ['\"', '\"\"', '```'], // 明确停止在引号\n          topP: 0.8, // 减少随机性\n          topK: 10\n        }\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(`Gemini API error: ${(error.error && error.error.message) || response.statusText}`);\n    }\n\n    const data = await response.json();\n    let translatedText = data.candidates?.[0]?.content?.parts?.[0]?.text?.trim();\n    \n    if (!translatedText) {\n      throw new Error('No translation returned from Gemini');\n    }\n\n    // 后处理：移除Gemini可能添加的引号和格式化\n    translatedText = translatedText\n      .replace(/^[\"'`]+|[\"'`]+$/g, '') // 移除开头和结尾的引号\n      .replace(/^\\*\\*|\\*\\*$/g, '') // 移除粗体标记\n      .replace(/^\\*|\\*$/g, '') // 移除斜体标记\n      .replace(/^```[\\w]*\\n?|\\n?```$/g, '') // 移除代码块标记\n      .trim();\n\n    return translatedText;\n  }\n\n  // 保留向后兼容的方法（已弃用，使用外部prompt函数）\n  private buildOptimizedPrompt(text: string, sourceLang: string, targetLang: string): string {\n    return buildGeminiPrompt(text, sourceLang, targetLang);\n  }\n\n  async testConnection(engine: string, config: any): Promise<boolean> {\n    try {\n      await this.translateText('Hello', 'en', 'zh-CN', engine, config);\n      return true;\n    } catch (error) {\n      console.error('Connection test failed:', error);\n      return false;\n    }\n  }\n}\n\n// Figma服务类 - 增强容器内文本识别\nclass FigmaService {\n  // 递归查找节点内的所有文本节点\n  private findTextNodesInNode(node: any): any[] {\n    const textNodes: any[] = [];\n    \n    if (node.type === 'TEXT') {\n      textNodes.push(node);\n    } else if ('children' in node) {\n      // 递归查找子节点中的文本\n      for (const child of node.children) {\n        textNodes.push(...this.findTextNodesInNode(child));\n      }\n    }\n    \n    return textNodes;\n  }\n\n  getSelectedTextNodes() {\n    const allTextNodes: any[] = [];\n    \n    // 遍历所有选中的节点\n    for (const selectedNode of figma.currentPage.selection) {\n      if (selectedNode.type === 'TEXT') {\n        // 直接选中的文本节点\n        allTextNodes.push(selectedNode);\n      } else {\n        // 在容器节点中查找文本节点\n        const containerTextNodes = this.findTextNodesInNode(selectedNode);\n        allTextNodes.push(...containerTextNodes);\n      }\n    }\n    \n    // 去重（防止重复选中）\n    const uniqueTextNodes = allTextNodes.filter((node, index, arr) => \n      arr.findIndex(n => n.id === node.id) === index\n    );\n    \n    return uniqueTextNodes;\n  }\n\n  getSelectionInfo() {\n    const selection = figma.currentPage.selection;\n    const textNodes = this.getSelectedTextNodes();\n    \n    console.log(`Selection analysis: ${selection.length} total nodes, found ${textNodes.length} text nodes`);\n    \n    return {\n      totalNodes: selection.length,\n      textNodes: textNodes.length,\n      nodeIds: textNodes.map(node => node.id),\n      textContents: textNodes.map(node => (node as any).characters || ''),\n      containerInfo: selection.map(node => ({\n        id: node.id,\n        type: node.type,\n        name: node.name,\n        hasChildren: 'children' in node ? (node as any).children.length : 0\n      }))\n    };\n  }\n\n  async applyTranslation(nodeId: string, translatedText: string, mode: string): Promise<void> {\n    let node: any;\n    try {\n      node = figma.getNodeById(nodeId) as any;\n    } catch (error) {\n      // Try to find the node in the current page\n      node = figma.currentPage.findOne(n => n.id === nodeId);\n    }\n    \n    if (!node || node.type !== 'TEXT') {\n      throw new Error('Node not found or not a text node');\n    }\n\n    // Load the font before making changes\n    await figma.loadFontAsync(node.fontName);\n\n    switch (mode) {\n      case 'replace':\n        node.characters = translatedText;\n        break;\n      case 'beside':\n        await this.createBesideText(node, translatedText);\n        break;\n      case 'newFrame':\n        await this.createFrameWithTranslation(node, translatedText);\n        break;\n      case 'newPage':\n        await this.createPageWithTranslation(node, translatedText);\n        break;\n      default:\n        throw new Error(`Unsupported mode: ${mode}`);\n    }\n  }\n\n  async createBesideText(originalNode: any, translatedText: string): Promise<void> {\n    const translatedNode = originalNode.clone();\n    translatedNode.characters = translatedText;\n    translatedNode.x = originalNode.x + originalNode.width + 20;\n    \n    // Make translation text green to distinguish it\n    const fills = originalNode.fills.slice();\n    if (fills.length > 0 && fills[0].type === 'SOLID') {\n      fills[0] = Object.assign({}, fills[0], {\n        color: { r: 0, g: 0.5, b: 0 }\n      });\n      translatedNode.fills = fills;\n    }\n  }\n\n  async createFrameWithTranslation(originalNode: any, translatedText: string): Promise<void> {\n    const frame = figma.createFrame();\n    frame.name = 'Translation Frame';\n    frame.x = originalNode.x + originalNode.width + 50;\n    frame.y = originalNode.y;\n    \n    // Add original text\n    const originalClone = originalNode.clone();\n    originalClone.x = 0;\n    originalClone.y = 0;\n    frame.appendChild(originalClone);\n    \n    // Add translated text below\n    const translatedClone = originalNode.clone();\n    translatedClone.characters = translatedText;\n    translatedClone.x = 0;\n    translatedClone.y = originalClone.height + 10;\n    frame.appendChild(translatedClone);\n    \n    // Resize frame to fit content\n    frame.resize(\n      Math.max(originalClone.width, translatedClone.width) + 20,\n      originalClone.height + translatedClone.height + 30\n    );\n    \n    // Add background\n    frame.backgrounds = [{\n      type: 'SOLID',\n      color: { r: 0.95, g: 0.95, b: 0.95 }\n    }];\n  }\n\n  async createPageWithTranslation(originalNode: any, translatedText: string): Promise<void> {\n    const newPage = figma.createPage();\n    newPage.name = `Translation - ${new Date().toLocaleString()}`;\n    \n    // Add original text\n    const originalClone = originalNode.clone();\n    originalClone.x = 100;\n    originalClone.y = 100;\n    newPage.appendChild(originalClone);\n    \n    // Add translated text\n    const translatedClone = originalNode.clone();\n    translatedClone.characters = translatedText;\n    translatedClone.x = 100;\n    translatedClone.y = originalClone.y + originalClone.height + 50;\n    newPage.appendChild(translatedClone);\n  }\n\n  getAvailableFonts(): string[] {\n    return ['Inter', 'Roboto', 'Arial', 'Helvetica'];\n  }\n}\n\n// 优化的消息处理器 - 实现并行翻译和自动应用\nclass OptimizedMessageHandler {\n  private isTranslating: boolean = false;\n  private translationEngine: OptimizedTranslationEngine;\n  private figmaService: FigmaService;\n\n  constructor() {\n    this.translationEngine = new OptimizedTranslationEngine();\n    this.figmaService = new FigmaService();\n  }\n\n  async handleMessage(message: any): Promise<any> {\n    console.log('Handling message:', message.type);\n    \n    try {\n      switch (message.type) {\n        case 'get-selection':\n          return {\n            type: 'selection-info',\n            payload: this.figmaService.getSelectionInfo()\n          };\n\n        case 'select-all-text':\n          return await this.handleSelectAllText();\n\n        case 'start-translation':\n          return await this.handleOptimizedTranslation(message.payload);\n\n        case 'cancel-translation':\n          this.isTranslating = false;\n          return { type: 'translation-cancelled' };\n\n        case 'apply-translation':\n          return await this.handleApplyTranslation(message.payload);\n\n        case 'test-engine':\n          return await this.handleTestEngine(message.payload);\n\n        case 'save-settings':\n          return await this.handleSaveSettings(message.payload);\n\n        case 'load-settings':\n          return await this.handleLoadSettings();\n\n        default:\n          console.log('Unknown message type:', message.type);\n          return null;\n      }\n    } catch (error) {\n      console.error('Message handling error:', error);\n      return {\n        type: 'error',\n        payload: { error: error.message }\n      };\n    }\n  }\n\n  // 优化的并行翻译处理\n  private async handleOptimizedTranslation(payload: any): Promise<any> {\n    if (this.isTranslating) {\n      throw new Error('Translation already in progress');\n    }\n\n    this.isTranslating = true;\n    const { engine, sourceLang, targetLang, mode, nodeIds, config } = payload;\n    const results: any[] = [];\n    let successCount = 0;\n    let failureCount = 0;\n\n    try {\n      const engineConfig = config;\n      \n      // 并行批处理 - 一次处理3个以避免API限制\n      const BATCH_SIZE = 3;\n      const batches = [];\n      \n      for (let i = 0; i < nodeIds.length; i += BATCH_SIZE) {\n        batches.push(nodeIds.slice(i, i + BATCH_SIZE));\n      }\n      \n      let completedCount = 0;\n      \n      for (const batch of batches) {\n        if (!this.isTranslating) {\n          break; // Cancelled\n        }\n        \n        // 并行处理当前批次\n        const batchPromises = batch.map(async (nodeId: string) => {\n          return await this.translateSingleNode(\n            nodeId, engine, sourceLang, targetLang, mode, engineConfig\n          );\n        });\n        \n        // 等待当前批次完成\n        const batchResults = await Promise.all(batchPromises);\n        \n        // 处理结果\n        for (const result of batchResults) {\n          results.push(result);\n          if (result.status === 'success') {\n            successCount++;\n          } else {\n            failureCount++;\n          }\n          \n          // 发送单个结果\n          this.postMessage({\n            type: 'translation-result',\n            payload: result\n          });\n        }\n        \n        completedCount += batch.length;\n        \n        // 发送进度更新\n        this.postMessage({\n          type: 'translation-progress',\n          payload: { progress: (completedCount / nodeIds.length) * 100 }\n        });\n        \n        // 批次间短暂延迟，避免API限制\n        if (completedCount < nodeIds.length) {\n          await new Promise(resolve => setTimeout(resolve, 300));\n        }\n      }\n\n      this.isTranslating = false;\n      return {\n        type: 'translation-complete',\n        payload: {\n          results,\n          successCount,\n          failureCount\n        }\n      };\n    } catch (error) {\n      this.isTranslating = false;\n      throw error;\n    }\n  }\n\n  // 单个节点翻译处理\n  private async translateSingleNode(\n    nodeId: string, \n    engine: string, \n    sourceLang: string, \n    targetLang: string, \n    mode: string, \n    engineConfig: any\n  ): Promise<any> {\n    let node: any;\n    try {\n      node = figma.getNodeById(nodeId) as any;\n    } catch (error) {\n      node = figma.currentPage.findOne(n => n.id === nodeId);\n    }\n    \n    if (!node || node.type !== 'TEXT') {\n      return {\n        nodeId,\n        originalText: '',\n        translatedText: '',\n        status: 'error',\n        error: 'Node not found or not a text node',\n        applied: false\n      };\n    }\n\n    const originalText = node.characters || '';\n    \n    try {\n      const translatedText = await this.translationEngine.translateText(\n        originalText, \n        sourceLang, \n        targetLang, \n        engine, \n        engineConfig\n      );\n\n      const result = {\n        nodeId,\n        originalText,\n        translatedText,\n        status: 'success',\n        applied: false\n      };\n\n      // 立即自动应用翻译，带重试机制\n      result.applied = await this.applyTranslationWithRetry(nodeId, translatedText, mode, 3);\n\n      return result;\n\n    } catch (error) {\n      return {\n        nodeId,\n        originalText,\n        translatedText: '',\n        status: 'error',\n        error: error.message,\n        applied: false\n      };\n    }\n  }\n\n  private async handleSelectAllText(): Promise<any> {\n    try {\n      // Get all text nodes in the current page\n      const allTextNodes = figma.currentPage.findAll(node => node.type === 'TEXT') as any[];\n      \n      // Select all text nodes\n      figma.currentPage.selection = allTextNodes;\n      \n      return {\n        type: 'selection-info',\n        payload: {\n          totalNodes: allTextNodes.length,\n          textNodes: allTextNodes.length,\n          nodeIds: allTextNodes.map(node => node.id),\n          textContents: allTextNodes.map(node => node.characters || '')\n        }\n      };\n    } catch (error) {\n      return {\n        type: 'error',\n        payload: { error: error.message }\n      };\n    }\n  }\n\n  /**\n   * 带重试机制的应用翻译方法\n   */\n  private async applyTranslationWithRetry(\n    nodeId: string, \n    translatedText: string, \n    mode: string, \n    maxRetries: number = 3,\n    delay: number = 1000\n  ): Promise<boolean> {\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        await this.figmaService.applyTranslation(nodeId, translatedText, mode);\n        console.log(`Translation applied successfully on attempt ${attempt}`);\n        return true;\n      } catch (error) {\n        console.warn(`Failed to apply translation (attempt ${attempt}/${maxRetries}):`, error.message);\n        \n        // 如果不是最后一次尝试，等待后重试\n        if (attempt < maxRetries) {\n          // 递增延迟时间 (指数退避)\n          const retryDelay = delay * Math.pow(1.5, attempt - 1);\n          console.log(`Retrying in ${retryDelay}ms...`);\n          await new Promise(resolve => setTimeout(resolve, retryDelay));\n        }\n      }\n    }\n    \n    console.error(`Failed to apply translation after ${maxRetries} attempts`);\n    return false;\n  }\n\n  private async handleApplyTranslation(payload: any): Promise<any> {\n    try {\n      const applied = await this.applyTranslationWithRetry(\n        payload.nodeId,\n        payload.translatedText,\n        payload.mode,\n        3 // 最多重试3次\n      );\n\n      return {\n        type: 'apply-result',\n        payload: { \n          success: applied,\n          error: applied ? null : 'Failed to apply translation after retries'\n        }\n      };\n    } catch (error) {\n      return {\n        type: 'apply-result',\n        payload: {\n          success: false,\n          error: error.message\n        }\n      };\n    }\n  }\n\n  private async handleTestEngine(payload: any): Promise<any> {\n    try {\n      const success = await this.translationEngine.testConnection(\n        payload.engine,\n        payload.config\n      );\n\n      return {\n        type: 'engine-test-result',\n        payload: {\n          engine: payload.engine,\n          success,\n          error: success ? null : 'Connection test failed'\n        }\n      };\n    } catch (error) {\n      return {\n        type: 'engine-test-result',\n        payload: {\n          engine: payload.engine,\n          success: false,\n          error: error.message\n        }\n      };\n    }\n  }\n\n  private async handleSaveSettings(payload: any): Promise<any> {\n    try {\n      // 保存引擎设置\n      if (payload.engines) {\n        await figma.clientStorage.setAsync('translationEngines', payload.engines);\n      }\n\n      // 保存其他设置\n      if (payload.settings) {\n        await figma.clientStorage.setAsync('pluginSettings', payload.settings);\n      }\n\n      // 保存翻译记忆\n      if (payload.translationMemories) {\n        await figma.clientStorage.setAsync('translationMemories', payload.translationMemories);\n      }\n\n      console.log('Settings saved successfully');\n      \n      return {\n        type: 'settings-save-result',\n        payload: { success: true }\n      };\n    } catch (error) {\n      console.error('Failed to save settings:', error);\n      \n      return {\n        type: 'settings-save-result',\n        payload: { \n          success: false,\n          error: error.message \n        }\n      };\n    }\n  }\n\n  private async handleLoadSettings(): Promise<any> {\n    try {\n      // 加载引擎设置\n      const engines = await figma.clientStorage.getAsync('translationEngines') || {\n        openai: { enabled: false, apiKey: '', model: 'gpt-3.5-turbo-instruct' },\n        gemini: { enabled: false, apiKey: '', model: 'gemini-pro' }\n      };\n\n      // 加载其他设置\n      const settings = await figma.clientStorage.getAsync('pluginSettings') || {\n        defaultTargetLang: 'zh-CN'\n      };\n\n      // 加载翻译记忆\n      const translationMemories = await figma.clientStorage.getAsync('translationMemories') || [];\n\n      console.log('Settings loaded successfully');\n      \n      return {\n        type: 'settings-loaded',\n        payload: {\n          engines,\n          settings,\n          translationMemories\n        }\n      };\n    } catch (error) {\n      console.error('Failed to load settings:', error);\n      \n      return {\n        type: 'settings-load-error',\n        payload: { error: error.message }\n      };\n    }\n  }\n\n  private postMessage(message: any): void {\n    figma.ui.postMessage(message);\n  }\n}\n\n// 主要插件类\nclass OptimizedPluginController {\n  private messageHandler: OptimizedMessageHandler;\n  private figmaService: FigmaService;\n\n  constructor() {\n    this.messageHandler = new OptimizedMessageHandler();\n    this.figmaService = new FigmaService();\n  }\n\n  async initialize(): Promise<void> {\n    console.log('Initializing optimized plugin...');\n    \n    this.setupUI();\n    this.setupMessageHandling();\n    this.setupEventListeners();\n    \n    // Send ready message\n    this.postMessage({\n      type: 'plugin-ready',\n      payload: {\n        version: '1.1.0',\n        selection: this.figmaService.getSelectionInfo()\n      }\n    });\n    \n    console.log('Optimized plugin initialized successfully');\n  }\n\n  private setupUI(): void {\n    figma.showUI(__html__, {\n      width: 380,\n      height: 600,\n      title: 'Cube Translator'\n    });\n  }\n\n  private setupMessageHandling(): void {\n    figma.ui.onmessage = async (message) => {\n      try {\n        console.log('Received message:', message.type);\n        const response = await this.messageHandler.handleMessage(message);\n        if (response) {\n          this.postMessage(response);\n        }\n      } catch (error) {\n        console.error('Message handling error:', error);\n        this.postMessage({\n          type: 'error',\n          payload: { error: error.message }\n        });\n      }\n    };\n  }\n\n  private setupEventListeners(): void {\n    figma.on('selectionchange', () => {\n      const selectionInfo = this.figmaService.getSelectionInfo();\n      this.postMessage({\n        type: 'selection-changed',\n        payload: selectionInfo\n      });\n    });\n\n    figma.on('currentpagechange', () => {\n      this.postMessage({\n        type: 'page-changed',\n        payload: {\n          pageId: figma.currentPage.id,\n          pageName: figma.currentPage.name\n        }\n      });\n    });\n\n    figma.on('close', () => {\n      console.log('Plugin closing...');\n    });\n  }\n\n  private postMessage(message: any): void {\n    figma.ui.postMessage(message);\n    console.log('Sent message:', message.type);\n  }\n}\n\n// 错误处理\nconst handleError = (error: any, context: string) => {\n  console.error(`Error in ${context}:`, error);\n  if (figma.ui) {\n    figma.ui.postMessage({\n      type: 'error',\n      payload: { error: error.message, context }\n    });\n  }\n};\n\n// 初始化函数\nasync function initializeOptimizedPlugin(): Promise<void> {\n  try {\n    const plugin = new OptimizedPluginController();\n    await plugin.initialize();\n  } catch (error) {\n    handleError(error, 'main initialization');\n  }\n}\n\n// 命令处理\nconst commands = {\n  'open-translator': async () => {\n    await initializeOptimizedPlugin();\n  },\n  'quick-translate': async () => {\n    await initializeOptimizedPlugin();\n    setTimeout(() => {\n      figma.ui.postMessage({\n        type: 'auto-translate',\n        payload: {\n          engine: 'openai',\n          sourceLang: 'auto',\n          targetLang: 'zh-CN'\n        }\n      });\n    }, 1000);\n  },\n  'open-settings': async () => {\n    await initializeOptimizedPlugin();\n    setTimeout(() => {\n      figma.ui.postMessage({ type: 'show-settings' });\n    }, 500);\n  }\n};\n\n// 启动插件\nif (figma.command && commands[figma.command]) {\n  commands[figma.command]().catch(error => {\n    handleError(error, `command: ${figma.command}`);\n  });\n} else {\n  initializeOptimizedPlugin().catch(error => {\n    handleError(error, 'default startup');\n  });\n}\n\nconsole.log('Optimized production plugin script loaded');"],"names":["console","log","LANGUAGE_NAMES","auto","en","ja","ko","fr","de","es","pt","ru","ar","hi","th","vi","id","ms","tr","it","nl","pl","buildOpenAIPrompt","text","sourceLang","targetLang","system","user","buildGeminiPrompt","OptimizedTranslationEngine","translateText","engine","config","this","translateWithOpenAI","translateWithGemini","Error","error","model","includes","promptData","response","fetch","method","headers","apiKey","body","JSON","stringify","messages","role","content","max_tokens","temperature","ok","json","message","statusText","translatedText","choices","trim","combinedPrompt","prompt","stop","contents","parts","generationConfig","maxOutputTokens","stopSequences","topP","topK","candidates","replace","buildOptimizedPrompt","testConnection","FigmaService","findTextNodesInNode","node","textNodes","type","push","child","children","getSelectedTextNodes","allTextNodes","selectedNode","figma","currentPage","selection","containerTextNodes","filter","index","arr","findIndex","n","getSelectionInfo","length","totalNodes","nodeIds","map","textContents","characters","containerInfo","name","hasChildren","applyTranslation","nodeId","mode","getNodeById","findOne","loadFontAsync","fontName","createBesideText","createFrameWithTranslation","createPageWithTranslation","originalNode","translatedNode","clone","x","width","fills","slice","Object","assign","color","r","g","b","frame","createFrame","y","originalClone","appendChild","translatedClone","height","resize","Math","max","backgrounds","newPage","createPage","Date","toLocaleString","getAvailableFonts","OptimizedMessageHandler","constructor","isTranslating","translationEngine","figmaService","handleMessage","payload","handleSelectAllText","handleOptimizedTranslation","handleApplyTranslation","handleTestEngine","handleSaveSettings","handleLoadSettings","results","successCount","failureCount","engineConfig","BATCH_SIZE","batches","i","completedCount","batch","batchPromises","async","translateSingleNode","batchResults","Promise","all","result","status","postMessage","progress","resolve","setTimeout","originalText","applied","applyTranslationWithRetry","findAll","maxRetries","delay","attempt","warn","retryDelay","pow","success","engines","clientStorage","setAsync","settings","translationMemories","getAsync","openai","enabled","gemini","defaultTargetLang","ui","OptimizedPluginController","messageHandler","initialize","setupUI","setupMessageHandling","setupEventListeners","version","showUI","__html__","title","onmessage","on","selectionInfo","pageId","pageName","handleError","context","initializeOptimizedPlugin","plugin","commands","command","catch"],"sourceRoot":""}