{"version":3,"file":"code.js","mappings":"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","sources":["webpack://figma-translator-advanced/./src/main/code-optimized.ts"],"sourcesContent":["/**\n * 优化版本的Figma翻译插件主线程 - 修复翻译质量和性能问题\n */\n\nconsole.log('Optimized Production Plugin loading...');\n\n// 翻译引擎类 - 优化的Prompt和错误处理\nclass OptimizedTranslationEngine {\n  async translateText(text: string, sourceLang: string, targetLang: string, engine: string, config: any): Promise<string> {\n    console.log(`Translating with ${engine}:`, { text, sourceLang, targetLang });\n    \n    try {\n      if (engine === 'openai') {\n        return await this.translateWithOpenAI(text, sourceLang, targetLang, config);\n      } else if (engine === 'gemini') {\n        return await this.translateWithGemini(text, sourceLang, targetLang, config);\n      } else {\n        throw new Error(`Unsupported engine: ${engine}`);\n      }\n    } catch (error) {\n      console.error('Translation error:', error);\n      throw error;\n    }\n  }\n\n  private async translateWithOpenAI(text: string, sourceLang: string, targetLang: string, config: any): Promise<string> {\n    const prompt = this.buildOptimizedPrompt(text, sourceLang, targetLang);\n    \n    const response = await fetch('https://api.openai.com/v1/completions', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${config.apiKey}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        model: config.model || 'gpt-3.5-turbo-instruct',\n        prompt: prompt,\n        max_tokens: 500, // Reduced for faster response\n        temperature: 0.1, // Lower temperature for consistent results\n        stop: ['\\\\n\\\\n', 'Original:', 'Translation:']\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(`OpenAI API error: ${(error.error && error.error.message) || response.statusText}`);\n    }\n\n    const data = await response.json();\n    const translatedText = data.choices && data.choices[0] && data.choices[0].text && data.choices[0].text.trim();\n    \n    if (!translatedText) {\n      throw new Error('No translation returned from OpenAI');\n    }\n\n    return translatedText;\n  }\n\n  private async translateWithGemini(text: string, sourceLang: string, targetLang: string, config: any): Promise<string> {\n    const prompt = this.buildOptimizedPrompt(text, sourceLang, targetLang);\n    \n    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${config.model}:generateContent?key=${config.apiKey}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        contents: [{\n          parts: [{\n            text: prompt\n          }]\n        }],\n        generationConfig: {\n          temperature: 0.1, // Lower temperature for consistent results\n          maxOutputTokens: 500 // Reduced for faster response\n        }\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(`Gemini API error: ${(error.error && error.error.message) || response.statusText}`);\n    }\n\n    const data = await response.json();\n    const translatedText = data.candidates && data.candidates[0] && data.candidates[0].content && \n                          data.candidates[0].content.parts && data.candidates[0].content.parts[0] && \n                          data.candidates[0].content.parts[0].text && data.candidates[0].content.parts[0].text.trim();\n    \n    if (!translatedText) {\n      throw new Error('No translation returned from Gemini');\n    }\n\n    return translatedText;\n  }\n\n  private buildOptimizedPrompt(text: string, sourceLang: string, targetLang: string): string {\n    const langNames = {\n      'auto': 'auto-detected language',\n      'en': 'English',\n      'zh-CN': 'Simplified Chinese',\n      'zh-TW': 'Traditional Chinese',\n      'ja': 'Japanese',\n      'ko': 'Korean',\n      'fr': 'French',\n      'de': 'German',\n      'es': 'Spanish'\n    };\n\n    const sourceLangName = langNames[sourceLang] || sourceLang;\n    const targetLangName = langNames[targetLang] || targetLang;\n\n    // 优化的Figma UI专用Prompt\n    return `Translate this Figma UI element from ${sourceLangName} to ${targetLangName}.\n\nCRITICAL RULES:\n- This is UI/interface text - preserve ALL formatting exactly\n- Keep currency symbols unchanged (¥ stays ¥, $ stays $, € stays €)\n- Keep numbers, prices, codes, and measurements exactly as-is\n- Preserve punctuation, spacing, and special characters\n- Use standard UI terminology for the target language\n- Output ONLY the translated text, nothing else\n\nText: \"${text}\"`;\n  }\n\n  async testConnection(engine: string, config: any): Promise<boolean> {\n    try {\n      await this.translateText('Hello', 'en', 'zh-CN', engine, config);\n      return true;\n    } catch (error) {\n      console.error('Connection test failed:', error);\n      return false;\n    }\n  }\n}\n\n// Figma服务类 - 保持不变\nclass FigmaService {\n  getSelectedTextNodes() {\n    return figma.currentPage.selection.filter(node => node.type === 'TEXT');\n  }\n\n  getSelectionInfo() {\n    const selection = figma.currentPage.selection;\n    const textNodes = this.getSelectedTextNodes();\n    \n    return {\n      totalNodes: selection.length,\n      textNodes: textNodes.length,\n      nodeIds: textNodes.map(node => node.id),\n      textContents: textNodes.map(node => (node as any).characters || '')\n    };\n  }\n\n  async applyTranslation(nodeId: string, translatedText: string, mode: string): Promise<void> {\n    let node: any;\n    try {\n      node = figma.getNodeById(nodeId) as any;\n    } catch (error) {\n      // Try to find the node in the current page\n      node = figma.currentPage.findOne(n => n.id === nodeId);\n    }\n    \n    if (!node || node.type !== 'TEXT') {\n      throw new Error('Node not found or not a text node');\n    }\n\n    // Load the font before making changes\n    await figma.loadFontAsync(node.fontName);\n\n    switch (mode) {\n      case 'replace':\n        node.characters = translatedText;\n        break;\n      case 'beside':\n        await this.createBesideText(node, translatedText);\n        break;\n      case 'newFrame':\n        await this.createFrameWithTranslation(node, translatedText);\n        break;\n      case 'newPage':\n        await this.createPageWithTranslation(node, translatedText);\n        break;\n      default:\n        throw new Error(`Unsupported mode: ${mode}`);\n    }\n  }\n\n  async createBesideText(originalNode: any, translatedText: string): Promise<void> {\n    const translatedNode = originalNode.clone();\n    translatedNode.characters = translatedText;\n    translatedNode.x = originalNode.x + originalNode.width + 20;\n    \n    // Make translation text green to distinguish it\n    const fills = originalNode.fills.slice();\n    if (fills.length > 0 && fills[0].type === 'SOLID') {\n      fills[0] = Object.assign({}, fills[0], {\n        color: { r: 0, g: 0.5, b: 0 }\n      });\n      translatedNode.fills = fills;\n    }\n  }\n\n  async createFrameWithTranslation(originalNode: any, translatedText: string): Promise<void> {\n    const frame = figma.createFrame();\n    frame.name = 'Translation Frame';\n    frame.x = originalNode.x + originalNode.width + 50;\n    frame.y = originalNode.y;\n    \n    // Add original text\n    const originalClone = originalNode.clone();\n    originalClone.x = 0;\n    originalClone.y = 0;\n    frame.appendChild(originalClone);\n    \n    // Add translated text below\n    const translatedClone = originalNode.clone();\n    translatedClone.characters = translatedText;\n    translatedClone.x = 0;\n    translatedClone.y = originalClone.height + 10;\n    frame.appendChild(translatedClone);\n    \n    // Resize frame to fit content\n    frame.resize(\n      Math.max(originalClone.width, translatedClone.width) + 20,\n      originalClone.height + translatedClone.height + 30\n    );\n    \n    // Add background\n    frame.backgrounds = [{\n      type: 'SOLID',\n      color: { r: 0.95, g: 0.95, b: 0.95 }\n    }];\n  }\n\n  async createPageWithTranslation(originalNode: any, translatedText: string): Promise<void> {\n    const newPage = figma.createPage();\n    newPage.name = `Translation - ${new Date().toLocaleString()}`;\n    \n    // Add original text\n    const originalClone = originalNode.clone();\n    originalClone.x = 100;\n    originalClone.y = 100;\n    newPage.appendChild(originalClone);\n    \n    // Add translated text\n    const translatedClone = originalNode.clone();\n    translatedClone.characters = translatedText;\n    translatedClone.x = 100;\n    translatedClone.y = originalClone.y + originalClone.height + 50;\n    newPage.appendChild(translatedClone);\n  }\n\n  getAvailableFonts(): string[] {\n    return ['Inter', 'Roboto', 'Arial', 'Helvetica'];\n  }\n}\n\n// 优化的消息处理器 - 实现并行翻译和自动应用\nclass OptimizedMessageHandler {\n  private isTranslating: boolean = false;\n  private translationEngine: OptimizedTranslationEngine;\n  private figmaService: FigmaService;\n\n  constructor() {\n    this.translationEngine = new OptimizedTranslationEngine();\n    this.figmaService = new FigmaService();\n  }\n\n  async handleMessage(message: any): Promise<any> {\n    console.log('Handling message:', message.type);\n    \n    try {\n      switch (message.type) {\n        case 'get-selection':\n          return {\n            type: 'selection-info',\n            payload: this.figmaService.getSelectionInfo()\n          };\n\n        case 'select-all-text':\n          return await this.handleSelectAllText();\n\n        case 'start-translation':\n          return await this.handleOptimizedTranslation(message.payload);\n\n        case 'cancel-translation':\n          this.isTranslating = false;\n          return { type: 'translation-cancelled' };\n\n        case 'apply-translation':\n          return await this.handleApplyTranslation(message.payload);\n\n        case 'test-engine':\n          return await this.handleTestEngine(message.payload);\n\n        case 'save-settings':\n          return await this.handleSaveSettings(message.payload);\n\n        case 'load-settings':\n          return await this.handleLoadSettings();\n\n        default:\n          console.log('Unknown message type:', message.type);\n          return null;\n      }\n    } catch (error) {\n      console.error('Message handling error:', error);\n      return {\n        type: 'error',\n        payload: { error: error.message }\n      };\n    }\n  }\n\n  // 优化的并行翻译处理\n  private async handleOptimizedTranslation(payload: any): Promise<any> {\n    if (this.isTranslating) {\n      throw new Error('Translation already in progress');\n    }\n\n    this.isTranslating = true;\n    const { engine, sourceLang, targetLang, mode, nodeIds, config } = payload;\n    const results: any[] = [];\n    let successCount = 0;\n    let failureCount = 0;\n\n    try {\n      const engineConfig = config;\n      \n      // 并行批处理 - 一次处理3个以避免API限制\n      const BATCH_SIZE = 3;\n      const batches = [];\n      \n      for (let i = 0; i < nodeIds.length; i += BATCH_SIZE) {\n        batches.push(nodeIds.slice(i, i + BATCH_SIZE));\n      }\n      \n      let completedCount = 0;\n      \n      for (const batch of batches) {\n        if (!this.isTranslating) {\n          break; // Cancelled\n        }\n        \n        // 并行处理当前批次\n        const batchPromises = batch.map(async (nodeId: string) => {\n          return await this.translateSingleNode(\n            nodeId, engine, sourceLang, targetLang, mode, engineConfig\n          );\n        });\n        \n        // 等待当前批次完成\n        const batchResults = await Promise.all(batchPromises);\n        \n        // 处理结果\n        for (const result of batchResults) {\n          results.push(result);\n          if (result.status === 'success') {\n            successCount++;\n          } else {\n            failureCount++;\n          }\n          \n          // 发送单个结果\n          this.postMessage({\n            type: 'translation-result',\n            payload: result\n          });\n        }\n        \n        completedCount += batch.length;\n        \n        // 发送进度更新\n        this.postMessage({\n          type: 'translation-progress',\n          payload: { progress: (completedCount / nodeIds.length) * 100 }\n        });\n        \n        // 批次间短暂延迟，避免API限制\n        if (completedCount < nodeIds.length) {\n          await new Promise(resolve => setTimeout(resolve, 300));\n        }\n      }\n\n      this.isTranslating = false;\n      return {\n        type: 'translation-complete',\n        payload: {\n          results,\n          successCount,\n          failureCount\n        }\n      };\n    } catch (error) {\n      this.isTranslating = false;\n      throw error;\n    }\n  }\n\n  // 单个节点翻译处理\n  private async translateSingleNode(\n    nodeId: string, \n    engine: string, \n    sourceLang: string, \n    targetLang: string, \n    mode: string, \n    engineConfig: any\n  ): Promise<any> {\n    let node: any;\n    try {\n      node = figma.getNodeById(nodeId) as any;\n    } catch (error) {\n      node = figma.currentPage.findOne(n => n.id === nodeId);\n    }\n    \n    if (!node || node.type !== 'TEXT') {\n      return {\n        nodeId,\n        originalText: '',\n        translatedText: '',\n        status: 'error',\n        error: 'Node not found or not a text node',\n        applied: false\n      };\n    }\n\n    const originalText = node.characters || '';\n    \n    try {\n      const translatedText = await this.translationEngine.translateText(\n        originalText, \n        sourceLang, \n        targetLang, \n        engine, \n        engineConfig\n      );\n\n      const result = {\n        nodeId,\n        originalText,\n        translatedText,\n        status: 'success',\n        applied: false\n      };\n\n      // 立即自动应用翻译\n      try {\n        await this.figmaService.applyTranslation(nodeId, translatedText, mode);\n        result.applied = true;\n      } catch (applyError) {\n        console.warn('Failed to auto-apply translation:', applyError);\n        result.applied = false;\n      }\n\n      return result;\n\n    } catch (error) {\n      return {\n        nodeId,\n        originalText,\n        translatedText: '',\n        status: 'error',\n        error: error.message,\n        applied: false\n      };\n    }\n  }\n\n  private async handleSelectAllText(): Promise<any> {\n    try {\n      // Get all text nodes in the current page\n      const allTextNodes = figma.currentPage.findAll(node => node.type === 'TEXT') as any[];\n      \n      // Select all text nodes\n      figma.currentPage.selection = allTextNodes;\n      \n      return {\n        type: 'selection-info',\n        payload: {\n          totalNodes: allTextNodes.length,\n          textNodes: allTextNodes.length,\n          nodeIds: allTextNodes.map(node => node.id),\n          textContents: allTextNodes.map(node => node.characters || '')\n        }\n      };\n    } catch (error) {\n      return {\n        type: 'error',\n        payload: { error: error.message }\n      };\n    }\n  }\n\n  private async handleApplyTranslation(payload: any): Promise<any> {\n    try {\n      await this.figmaService.applyTranslation(\n        payload.nodeId,\n        payload.translatedText,\n        payload.mode\n      );\n\n      return {\n        type: 'apply-result',\n        payload: { success: true }\n      };\n    } catch (error) {\n      return {\n        type: 'apply-result',\n        payload: {\n          success: false,\n          error: error.message\n        }\n      };\n    }\n  }\n\n  private async handleTestEngine(payload: any): Promise<any> {\n    try {\n      const success = await this.translationEngine.testConnection(\n        payload.engine,\n        payload.config\n      );\n\n      return {\n        type: 'engine-test-result',\n        payload: {\n          engine: payload.engine,\n          success,\n          error: success ? null : 'Connection test failed'\n        }\n      };\n    } catch (error) {\n      return {\n        type: 'engine-test-result',\n        payload: {\n          engine: payload.engine,\n          success: false,\n          error: error.message\n        }\n      };\n    }\n  }\n\n  private async handleSaveSettings(payload: any): Promise<any> {\n    try {\n      // 保存引擎设置\n      if (payload.engines) {\n        await figma.clientStorage.setAsync('translationEngines', payload.engines);\n      }\n\n      // 保存其他设置\n      if (payload.settings) {\n        await figma.clientStorage.setAsync('pluginSettings', payload.settings);\n      }\n\n      // 保存翻译记忆\n      if (payload.translationMemories) {\n        await figma.clientStorage.setAsync('translationMemories', payload.translationMemories);\n      }\n\n      console.log('Settings saved successfully');\n      \n      return {\n        type: 'settings-save-result',\n        payload: { success: true }\n      };\n    } catch (error) {\n      console.error('Failed to save settings:', error);\n      \n      return {\n        type: 'settings-save-result',\n        payload: { \n          success: false,\n          error: error.message \n        }\n      };\n    }\n  }\n\n  private async handleLoadSettings(): Promise<any> {\n    try {\n      // 加载引擎设置\n      const engines = await figma.clientStorage.getAsync('translationEngines') || {\n        openai: { enabled: false, apiKey: '', model: 'gpt-3.5-turbo-instruct' },\n        gemini: { enabled: false, apiKey: '', model: 'gemini-pro' }\n      };\n\n      // 加载其他设置\n      const settings = await figma.clientStorage.getAsync('pluginSettings') || {\n        defaultTargetLang: 'zh-CN'\n      };\n\n      // 加载翻译记忆\n      const translationMemories = await figma.clientStorage.getAsync('translationMemories') || [];\n\n      console.log('Settings loaded successfully');\n      \n      return {\n        type: 'settings-loaded',\n        payload: {\n          engines,\n          settings,\n          translationMemories\n        }\n      };\n    } catch (error) {\n      console.error('Failed to load settings:', error);\n      \n      return {\n        type: 'settings-load-error',\n        payload: { error: error.message }\n      };\n    }\n  }\n\n  private postMessage(message: any): void {\n    figma.ui.postMessage(message);\n  }\n}\n\n// 主要插件类\nclass OptimizedPluginController {\n  private messageHandler: OptimizedMessageHandler;\n  private figmaService: FigmaService;\n\n  constructor() {\n    this.messageHandler = new OptimizedMessageHandler();\n    this.figmaService = new FigmaService();\n  }\n\n  async initialize(): Promise<void> {\n    console.log('Initializing optimized plugin...');\n    \n    this.setupUI();\n    this.setupMessageHandling();\n    this.setupEventListeners();\n    \n    // Send ready message\n    this.postMessage({\n      type: 'plugin-ready',\n      payload: {\n        version: '1.1.0',\n        selection: this.figmaService.getSelectionInfo()\n      }\n    });\n    \n    console.log('Optimized plugin initialized successfully');\n  }\n\n  private setupUI(): void {\n    figma.showUI(__html__, {\n      width: 380,\n      height: 600,\n      title: 'Cube Translator'\n    });\n  }\n\n  private setupMessageHandling(): void {\n    figma.ui.onmessage = async (message) => {\n      try {\n        console.log('Received message:', message.type);\n        const response = await this.messageHandler.handleMessage(message);\n        if (response) {\n          this.postMessage(response);\n        }\n      } catch (error) {\n        console.error('Message handling error:', error);\n        this.postMessage({\n          type: 'error',\n          payload: { error: error.message }\n        });\n      }\n    };\n  }\n\n  private setupEventListeners(): void {\n    figma.on('selectionchange', () => {\n      const selectionInfo = this.figmaService.getSelectionInfo();\n      this.postMessage({\n        type: 'selection-changed',\n        payload: selectionInfo\n      });\n    });\n\n    figma.on('currentpagechange', () => {\n      this.postMessage({\n        type: 'page-changed',\n        payload: {\n          pageId: figma.currentPage.id,\n          pageName: figma.currentPage.name\n        }\n      });\n    });\n\n    figma.on('close', () => {\n      console.log('Plugin closing...');\n    });\n  }\n\n  private postMessage(message: any): void {\n    figma.ui.postMessage(message);\n    console.log('Sent message:', message.type);\n  }\n}\n\n// 错误处理\nconst handleError = (error: any, context: string) => {\n  console.error(`Error in ${context}:`, error);\n  if (figma.ui) {\n    figma.ui.postMessage({\n      type: 'error',\n      payload: { error: error.message, context }\n    });\n  }\n};\n\n// 初始化函数\nasync function initializeOptimizedPlugin(): Promise<void> {\n  try {\n    const plugin = new OptimizedPluginController();\n    await plugin.initialize();\n  } catch (error) {\n    handleError(error, 'main initialization');\n  }\n}\n\n// 命令处理\nconst commands = {\n  'open-translator': async () => {\n    await initializeOptimizedPlugin();\n  },\n  'quick-translate': async () => {\n    await initializeOptimizedPlugin();\n    setTimeout(() => {\n      figma.ui.postMessage({\n        type: 'auto-translate',\n        payload: {\n          engine: 'openai',\n          sourceLang: 'auto',\n          targetLang: 'zh-CN'\n        }\n      });\n    }, 1000);\n  },\n  'open-settings': async () => {\n    await initializeOptimizedPlugin();\n    setTimeout(() => {\n      figma.ui.postMessage({ type: 'show-settings' });\n    }, 500);\n  }\n};\n\n// 启动插件\nif (figma.command && commands[figma.command]) {\n  commands[figma.command]().catch(error => {\n    handleError(error, `command: ${figma.command}`);\n  });\n} else {\n  initializeOptimizedPlugin().catch(error => {\n    handleError(error, 'default startup');\n  });\n}\n\nconsole.log('Optimized production plugin script loaded');"],"names":["console","log","OptimizedTranslationEngine","translateText","text","sourceLang","targetLang","engine","config","this","translateWithOpenAI","translateWithGemini","Error","error","prompt","buildOptimizedPrompt","response","fetch","method","headers","apiKey","body","JSON","stringify","model","max_tokens","temperature","stop","ok","json","message","statusText","data","translatedText","choices","trim","contents","parts","generationConfig","maxOutputTokens","candidates","content","langNames","testConnection","FigmaService","getSelectedTextNodes","figma","currentPage","selection","filter","node","type","getSelectionInfo","textNodes","totalNodes","length","nodeIds","map","id","textContents","characters","applyTranslation","nodeId","mode","getNodeById","findOne","n","loadFontAsync","fontName","createBesideText","createFrameWithTranslation","createPageWithTranslation","originalNode","translatedNode","clone","x","width","fills","slice","Object","assign","color","r","g","b","frame","createFrame","name","y","originalClone","appendChild","translatedClone","height","resize","Math","max","backgrounds","newPage","createPage","Date","toLocaleString","getAvailableFonts","OptimizedMessageHandler","constructor","isTranslating","translationEngine","figmaService","handleMessage","payload","handleSelectAllText","handleOptimizedTranslation","handleApplyTranslation","handleTestEngine","handleSaveSettings","handleLoadSettings","results","successCount","failureCount","engineConfig","BATCH_SIZE","batches","i","push","completedCount","batch","batchPromises","async","translateSingleNode","batchResults","Promise","all","result","status","postMessage","progress","resolve","setTimeout","originalText","applied","applyError","warn","allTextNodes","findAll","success","engines","clientStorage","setAsync","settings","translationMemories","getAsync","openai","enabled","gemini","defaultTargetLang","ui","OptimizedPluginController","messageHandler","initialize","setupUI","setupMessageHandling","setupEventListeners","version","showUI","__html__","title","onmessage","on","selectionInfo","pageId","pageName","handleError","context","initializeOptimizedPlugin","plugin","commands","command","catch"],"sourceRoot":""}