{"version":3,"file":"ui.js","mappings":"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","sources":["webpack://figma-translator-advanced/./src/ui/index-production.js"],"sourcesContent":["/**\n * 生产级Figma翻译插件UI - 完整功能版本\n * 采用纯JavaScript实现，避免复杂的TypeScript类型问题\n */\n\nconsole.log('Production UI loading...');\n\n// 应用状态管理\nclass AppState {\n  constructor() {\n    this.state = {\n      currentPage: 'translate',\n      selection: { totalNodes: 0, textNodes: 0, nodeIds: [], textContents: [] },\n      translation: { \n        isTranslating: false, \n        progress: 0, \n        results: [], \n        currentEngine: 'openai',\n        sourceLang: 'auto',\n        targetLang: 'zh-CN',\n        mode: 'replace'\n      },\n      engines: {\n        openai: { apiKey: '', model: 'gpt-3.5-turbo-instruct', enabled: false },\n        gemini: { apiKey: '', model: 'gemini-pro', enabled: false }\n      },\n      history: [],\n      error: null,\n      success: null\n    };\n    this.listeners = [];\n  }\n\n  subscribe(listener) {\n    this.listeners.push(listener);\n    return () => {\n      this.listeners = this.listeners.filter(l => l !== listener);\n    };\n  }\n\n  setState(updater) {\n    if (typeof updater === 'function') {\n      const updates = updater(this.state);\n      this.state = { ...this.state, ...updates };\n    } else {\n      this.state = { ...this.state, ...updater };\n    }\n    this.listeners.forEach(listener => listener(this.state));\n  }\n\n  updateNested(path, value) {\n    const keys = path.split('.');\n    let current = { ...this.state };\n    let target = current;\n    \n    for (let i = 0; i < keys.length - 1; i++) {\n      target[keys[i]] = { ...target[keys[i]] };\n      target = target[keys[i]];\n    }\n    \n    target[keys[keys.length - 1]] = value;\n    this.setState(current);\n  }\n}\n\nconst appState = new AppState();\n\n// UI组件\nclass UI {\n  constructor() {\n    this.container = null;\n    this.init();\n  }\n\n  init() {\n    console.log('Initializing production UI');\n    \n    this.container = document.getElementById('root');\n    if (!this.container) {\n      console.error('Root container not found');\n      return;\n    }\n\n    // 订阅状态变化\n    appState.subscribe((state) => {\n      this.render(state);\n    });\n\n    // 设置消息处理\n    this.setupMessageHandling();\n    \n    // 初始渲染\n    this.render(appState.state);\n    \n    console.log('Production UI initialized');\n  }\n\n  render(state) {\n    if (!this.container) return;\n\n    this.container.innerHTML = `\n      <div class=\"app\">\n        ${this.renderHeader(state)}\n        ${this.renderNavigation(state)}\n        ${this.renderContent(state)}\n        ${this.renderFooter(state)}\n        ${this.renderNotifications(state)}\n      </div>\n      ${this.renderStyles()}\n    `;\n\n    // 重新绑定事件\n    this.bindEvents(state);\n  }\n\n  renderHeader(state) {\n    return `\n      <header class=\"header\">\n        <div class=\"header-content\">\n          <div class=\"logo\">\n            <span class=\"logo-icon\">🌍</span>\n            <span class=\"logo-text\">Advanced Translator</span>\n          </div>\n          <div class=\"header-actions\">\n            <button class=\"btn-icon\" onclick=\"ui.showSettings()\" title=\"设置\">\n              ⚙️\n            </button>\n          </div>\n        </div>\n      </header>\n    `;\n  }\n\n  renderNavigation(state) {\n    const tabs = [\n      { id: 'translate', label: '翻译', icon: '🌍' },\n      { id: 'settings', label: '设置', icon: '⚙️' },\n      { id: 'history', label: '历史', icon: '📚' }\n    ];\n\n    return `\n      <nav class=\"navigation\">\n        ${tabs.map(tab => `\n          <button \n            class=\"nav-tab ${state.currentPage === tab.id ? 'active' : ''}\"\n            onclick=\"ui.switchPage('${tab.id}')\"\n          >\n            <span class=\"nav-icon\">${tab.icon}</span>\n            <span class=\"nav-label\">${tab.label}</span>\n          </button>\n        `).join('')}\n      </nav>\n    `;\n  }\n\n  renderContent(state) {\n    switch (state.currentPage) {\n      case 'translate':\n        return this.renderTranslatePage(state);\n      case 'settings':\n        return this.renderSettingsPage(state);\n      case 'history':\n        return this.renderHistoryPage(state);\n      default:\n        return this.renderTranslatePage(state);\n    }\n  }\n\n  renderTranslatePage(state) {\n    return `\n      <main class=\"content\">\n        ${this.renderSelectionInfo(state)}\n        ${this.renderTranslationOptions(state)}\n        ${this.renderTranslationActions(state)}\n        ${this.renderTranslationResults(state)}\n      </main>\n    `;\n  }\n\n  renderSelectionInfo(state) {\n    const { selection } = state;\n    const hasSelection = selection.textNodes > 0;\n    \n    return `\n      <section class=\"section\">\n        <h3 class=\"section-title\">\n          <span class=\"section-icon\">📋</span>\n          选择信息\n        </h3>\n        <div class=\"selection-card ${hasSelection ? 'has-selection' : ''}\">\n          <div class=\"selection-stats\">\n            <div class=\"stat\">\n              <span class=\"stat-value\">${selection.totalNodes}</span>\n              <span class=\"stat-label\">总节点</span>\n            </div>\n            <div class=\"stat\">\n              <span class=\"stat-value\">${selection.textNodes}</span>\n              <span class=\"stat-label\">文本节点</span>\n            </div>\n          </div>\n          ${hasSelection ? `\n            <div class=\"selection-preview\">\n              <h4>文本预览</h4>\n              <div class=\"text-preview\">\n                ${selection.textContents.slice(0, 3).map(text => `\n                  <div class=\"text-item\">${this.truncateText(text, 50)}</div>\n                `).join('')}\n                ${selection.textContents.length > 3 ? `\n                  <div class=\"text-more\">还有 ${selection.textContents.length - 3} 个文本...</div>\n                ` : ''}\n              </div>\n            </div>\n          ` : `\n            <div class=\"selection-empty\">\n              <p>请在Figma中选择包含文本的节点</p>\n              <button class=\"btn-secondary\" onclick=\"ui.refreshSelection()\">\n                刷新选择\n              </button>\n            </div>\n          `}\n        </div>\n      </section>\n    `;\n  }\n\n  renderTranslationOptions(state) {\n    const { translation, engines } = state;\n    const availableEngines = Object.entries(engines).filter(([_, config]) => config.enabled);\n    \n    return `\n      <section class=\"section\">\n        <h3 class=\"section-title\">\n          <span class=\"section-icon\">⚙️</span>\n          翻译选项\n        </h3>\n        <div class=\"options-grid\">\n          <div class=\"option-group\">\n            <label class=\"option-label\">翻译引擎</label>\n            <select class=\"select\" onchange=\"ui.updateTranslationOption('currentEngine', this.value)\">\n              ${availableEngines.length > 0 ? availableEngines.map(([key, config]) => `\n                <option value=\"${key}\" ${translation.currentEngine === key ? 'selected' : ''}>\n                  ${key === 'openai' ? 'OpenAI' : 'Google Gemini'} (${config.model})\n                </option>\n              `).join('') : `\n                <option value=\"\">请先在设置中配置API</option>\n              `}\n            </select>\n          </div>\n          \n          <div class=\"option-group\">\n            <label class=\"option-label\">源语言</label>\n            <select class=\"select\" onchange=\"ui.updateTranslationOption('sourceLang', this.value)\">\n              <option value=\"auto\" ${translation.sourceLang === 'auto' ? 'selected' : ''}>自动检测</option>\n              <option value=\"en\" ${translation.sourceLang === 'en' ? 'selected' : ''}>英语</option>\n              <option value=\"zh-CN\" ${translation.sourceLang === 'zh-CN' ? 'selected' : ''}>中文(简体)</option>\n              <option value=\"zh-TW\" ${translation.sourceLang === 'zh-TW' ? 'selected' : ''}>中文(繁體)</option>\n              <option value=\"ja\" ${translation.sourceLang === 'ja' ? 'selected' : ''}>日语</option>\n              <option value=\"ko\" ${translation.sourceLang === 'ko' ? 'selected' : ''}>韩语</option>\n              <option value=\"fr\" ${translation.sourceLang === 'fr' ? 'selected' : ''}>法语</option>\n              <option value=\"de\" ${translation.sourceLang === 'de' ? 'selected' : ''}>德语</option>\n              <option value=\"es\" ${translation.sourceLang === 'es' ? 'selected' : ''}>西班牙语</option>\n            </select>\n          </div>\n          \n          <div class=\"option-group\">\n            <label class=\"option-label\">目标语言</label>\n            <select class=\"select\" onchange=\"ui.updateTranslationOption('targetLang', this.value)\">\n              <option value=\"zh-CN\" ${translation.targetLang === 'zh-CN' ? 'selected' : ''}>中文(简体)</option>\n              <option value=\"zh-TW\" ${translation.targetLang === 'zh-TW' ? 'selected' : ''}>中文(繁體)</option>\n              <option value=\"en\" ${translation.targetLang === 'en' ? 'selected' : ''}>英语</option>\n              <option value=\"ja\" ${translation.targetLang === 'ja' ? 'selected' : ''}>日语</option>\n              <option value=\"ko\" ${translation.targetLang === 'ko' ? 'selected' : ''}>韩语</option>\n              <option value=\"fr\" ${translation.targetLang === 'fr' ? 'selected' : ''}>法语</option>\n              <option value=\"de\" ${translation.targetLang === 'de' ? 'selected' : ''}>德语</option>\n              <option value=\"es\" ${translation.targetLang === 'es' ? 'selected' : ''}>西班牙语</option>\n            </select>\n          </div>\n          \n          <div class=\"option-group\">\n            <label class=\"option-label\">输出模式</label>\n            <select class=\"select\" onchange=\"ui.updateTranslationOption('mode', this.value)\">\n              <option value=\"replace\" ${translation.mode === 'replace' ? 'selected' : ''}>替换原文</option>\n              <option value=\"beside\" ${translation.mode === 'beside' ? 'selected' : ''}>原文旁边</option>\n              <option value=\"newFrame\" ${translation.mode === 'newFrame' ? 'selected' : ''}>新建框架</option>\n              <option value=\"newPage\" ${translation.mode === 'newPage' ? 'selected' : ''}>新建页面</option>\n            </select>\n          </div>\n        </div>\n      </section>\n    `;\n  }\n\n  renderTranslationActions(state) {\n    const { translation, selection } = state;\n    const canTranslate = selection.textNodes > 0 && !translation.isTranslating;\n    const hasValidEngine = Object.values(state.engines).some(engine => engine.enabled);\n    \n    return `\n      <section class=\"section\">\n        <div class=\"actions\">\n          <button \n            class=\"btn-primary ${canTranslate && hasValidEngine ? '' : 'disabled'}\"\n            onclick=\"ui.startTranslation()\"\n            ${!canTranslate || !hasValidEngine ? 'disabled' : ''}\n          >\n            ${translation.isTranslating ? '🔄 翻译中...' : '🚀 开始翻译'}\n          </button>\n          \n          ${translation.isTranslating ? `\n            <button class=\"btn-secondary\" onclick=\"ui.cancelTranslation()\">\n              取消翻译\n            </button>\n          ` : ''}\n          \n          <button class=\"btn-secondary\" onclick=\"ui.refreshSelection()\">\n            🔄 刷新选择\n          </button>\n        </div>\n        \n        ${translation.isTranslating ? `\n          <div class=\"progress-section\">\n            <div class=\"progress-bar\">\n              <div class=\"progress-fill\" style=\"width: ${translation.progress}%\"></div>\n            </div>\n            <div class=\"progress-text\">\n              翻译进度: ${Math.round(translation.progress)}%\n            </div>\n          </div>\n        ` : ''}\n        \n        ${!hasValidEngine ? `\n          <div class=\"warning-message\">\n            <span class=\"warning-icon\">⚠️</span>\n            请先在设置中配置翻译引擎API密钥\n          </div>\n        ` : ''}\n      </section>\n    `;\n  }\n\n  renderTranslationResults(state) {\n    const { translation } = state;\n    \n    if (translation.results.length === 0) {\n      return '';\n    }\n    \n    return `\n      <section class=\"section\">\n        <h3 class=\"section-title\">\n          <span class=\"section-icon\">📄</span>\n          翻译结果\n        </h3>\n        <div class=\"results-container\">\n          ${translation.results.map((result, index) => `\n            <div class=\"result-item ${result.status}\">\n              <div class=\"result-header\">\n                <span class=\"result-index\">${index + 1}</span>\n                <span class=\"result-status ${result.status}\">\n                  ${result.status === 'success' ? '✅ 成功' : \n                    result.status === 'error' ? '❌ 失败' : '⏳ 处理中'}\n                </span>\n              </div>\n              <div class=\"result-content\">\n                <div class=\"original-text\">\n                  <label>原文:</label>\n                  <div class=\"text-content\">${this.escapeHtml(result.originalText)}</div>\n                </div>\n                ${result.translatedText ? `\n                  <div class=\"translated-text\">\n                    <label>译文:</label>\n                    <div class=\"text-content\">${this.escapeHtml(result.translatedText)}</div>\n                  </div>\n                ` : ''}\n                ${result.error ? `\n                  <div class=\"error-text\">\n                    <label>错误:</label>\n                    <div class=\"text-content error\">${this.escapeHtml(result.error)}</div>\n                  </div>\n                ` : ''}\n              </div>\n              ${result.status === 'success' ? `\n                <div class=\"result-actions\">\n                  <button class=\"btn-small\" onclick=\"ui.applyTranslation(${index})\">\n                    应用翻译\n                  </button>\n                  <button class=\"btn-small secondary\" onclick=\"ui.copyTranslation(${index})\">\n                    复制译文\n                  </button>\n                </div>\n              ` : ''}\n            </div>\n          `).join('')}\n        </div>\n      </section>\n    `;\n  }\n\n  renderSettingsPage(state) {\n    return `\n      <main class=\"content\">\n        <section class=\"section\">\n          <h3 class=\"section-title\">\n            <span class=\"section-icon\">🔑</span>\n            API配置\n          </h3>\n          ${this.renderEngineSettings('openai', 'OpenAI', state)}\n          ${this.renderEngineSettings('gemini', 'Google Gemini', state)}\n        </section>\n        \n        <section class=\"section\">\n          <h3 class=\"section-title\">\n            <span class=\"section-icon\">💾</span>\n            数据管理\n          </h3>\n          <div class=\"settings-actions\">\n            <button class=\"btn-secondary\" onclick=\"ui.exportSettings()\">\n              导出设置\n            </button>\n            <button class=\"btn-secondary\" onclick=\"ui.importSettings()\">\n              导入设置\n            </button>\n            <button class=\"btn-danger\" onclick=\"ui.clearHistory()\">\n              清除历史\n            </button>\n          </div>\n        </section>\n      </main>\n    `;\n  }\n\n  renderEngineSettings(engineKey, engineName, state) {\n    const engine = state.engines[engineKey];\n    \n    return `\n      <div class=\"engine-settings\">\n        <div class=\"engine-header\">\n          <h4>${engineName}</h4>\n          <label class=\"switch\">\n            <input \n              type=\"checkbox\" \n              ${engine.enabled ? 'checked' : ''}\n              onchange=\"ui.toggleEngine('${engineKey}', this.checked)\"\n            >\n            <span class=\"slider\"></span>\n          </label>\n        </div>\n        \n        <div class=\"engine-config ${engine.enabled ? '' : 'disabled'}\">\n          <div class=\"input-group\">\n            <label class=\"input-label\">API密钥</label>\n            <input \n              type=\"password\" \n              class=\"input\" \n              placeholder=\"输入您的${engineName} API密钥\"\n              value=\"${engine.apiKey}\"\n              onchange=\"ui.updateEngineConfig('${engineKey}', 'apiKey', this.value)\"\n            >\n          </div>\n          \n          <div class=\"input-group\">\n            <label class=\"input-label\">模型</label>\n            <select \n              class=\"select\"\n              onchange=\"ui.updateEngineConfig('${engineKey}', 'model', this.value)\"\n            >\n              ${this.getModelOptions(engineKey, engine.model)}\n            </select>\n          </div>\n          \n          <div class=\"engine-actions\">\n            <button \n              class=\"btn-small\" \n              onclick=\"ui.testEngine('${engineKey}')\"\n              ${engine.apiKey ? '' : 'disabled'}\n            >\n              测试连接\n            </button>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  renderHistoryPage(state) {\n    return `\n      <main class=\"content\">\n        <section class=\"section\">\n          <h3 class=\"section-title\">\n            <span class=\"section-icon\">📚</span>\n            翻译历史\n          </h3>\n          ${state.history.length > 0 ? `\n            <div class=\"history-list\">\n              ${state.history.map((item, index) => `\n                <div class=\"history-item\">\n                  <div class=\"history-header\">\n                    <span class=\"history-date\">${this.formatDate(item.timestamp)}</span>\n                    <span class=\"history-engine\">${item.engine}</span>\n                  </div>\n                  <div class=\"history-content\">\n                    <div class=\"history-original\">${this.truncateText(item.originalText, 100)}</div>\n                    <div class=\"history-translated\">${this.truncateText(item.translatedText, 100)}</div>\n                  </div>\n                  <div class=\"history-actions\">\n                    <button class=\"btn-small\" onclick=\"ui.reuseTranslation(${index})\">\n                      重用\n                    </button>\n                  </div>\n                </div>\n              `).join('')}\n            </div>\n          ` : `\n            <div class=\"empty-state\">\n              <p>暂无翻译历史</p>\n            </div>\n          `}\n        </section>\n      </main>\n    `;\n  }\n\n  renderFooter(state) {\n    return `\n      <footer class=\"footer\">\n        <div class=\"footer-content\">\n          <span class=\"version\">v1.0.0</span>\n          <span class=\"status\">\n            就绪\n          </span>\n        </div>\n      </footer>\n    `;\n  }\n\n  renderNotifications(state) {\n    let notifications = '';\n    \n    if (state.error) {\n      notifications += `\n        <div class=\"notification error\">\n          <span class=\"notification-icon\">❌</span>\n          <span class=\"notification-text\">${state.error}</span>\n          <button class=\"notification-close\" onclick=\"ui.clearError()\">×</button>\n        </div>\n      `;\n    }\n    \n    if (state.success) {\n      notifications += `\n        <div class=\"notification success\">\n          <span class=\"notification-icon\">✅</span>\n          <span class=\"notification-text\">${state.success}</span>\n          <button class=\"notification-close\" onclick=\"ui.clearSuccess()\">×</button>\n        </div>\n      `;\n    }\n    \n    return notifications ? `<div class=\"notifications\">${notifications}</div>` : '';\n  }\n\n  renderStyles() {\n    return `\n      <style>\n        * { margin: 0; padding: 0; box-sizing: border-box; }\n        \n        .app {\n          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n          font-size: 14px;\n          height: 100vh;\n          display: flex;\n          flex-direction: column;\n          background: #f5f5f5;\n        }\n        \n        /* Header */\n        .header {\n          background: #fff;\n          border-bottom: 1px solid #e1e4e8;\n          padding: 12px 16px;\n          flex-shrink: 0;\n        }\n        \n        .header-content {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n        }\n        \n        .logo {\n          display: flex;\n          align-items: center;\n          gap: 8px;\n          font-weight: 600;\n          color: #0366d6;\n        }\n        \n        .logo-icon { font-size: 18px; }\n        \n        /* Navigation */\n        .navigation {\n          background: #fff;\n          border-bottom: 1px solid #e1e4e8;\n          display: flex;\n          padding: 0 16px;\n          flex-shrink: 0;\n        }\n        \n        .nav-tab {\n          background: none;\n          border: none;\n          padding: 12px 16px;\n          display: flex;\n          align-items: center;\n          gap: 6px;\n          cursor: pointer;\n          color: #586069;\n          border-bottom: 2px solid transparent;\n          font-size: 13px;\n        }\n        \n        .nav-tab:hover { color: #0366d6; }\n        \n        .nav-tab.active {\n          color: #0366d6;\n          border-bottom-color: #0366d6;\n        }\n        \n        /* Content */\n        .content {\n          flex: 1;\n          overflow-y: auto;\n          padding: 16px;\n        }\n        \n        .section {\n          background: #fff;\n          border-radius: 8px;\n          padding: 16px;\n          margin-bottom: 16px;\n          box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n        }\n        \n        .section-title {\n          display: flex;\n          align-items: center;\n          gap: 8px;\n          font-size: 16px;\n          font-weight: 600;\n          margin-bottom: 16px;\n          color: #24292e;\n        }\n        \n        /* Selection Info */\n        .selection-card {\n          border: 1px solid #e1e4e8;\n          border-radius: 6px;\n          padding: 16px;\n        }\n        \n        .selection-card.has-selection {\n          border-color: #28a745;\n          background: #f8fff8;\n        }\n        \n        .selection-stats {\n          display: flex;\n          gap: 24px;\n          margin-bottom: 16px;\n        }\n        \n        .stat {\n          text-align: center;\n        }\n        \n        .stat-value {\n          display: block;\n          font-size: 24px;\n          font-weight: 600;\n          color: #0366d6;\n        }\n        \n        .stat-label {\n          font-size: 12px;\n          color: #586069;\n        }\n        \n        .text-preview {\n          max-height: 120px;\n          overflow-y: auto;\n        }\n        \n        .text-item {\n          padding: 8px;\n          background: #f6f8fa;\n          border-radius: 4px;\n          margin-bottom: 4px;\n          font-size: 12px;\n        }\n        \n        .text-more {\n          font-size: 12px;\n          color: #586069;\n          font-style: italic;\n        }\n        \n        .selection-empty {\n          text-align: center;\n          color: #586069;\n        }\n        \n        /* Options */\n        .options-grid {\n          display: grid;\n          grid-template-columns: 1fr 1fr;\n          gap: 16px;\n        }\n        \n        .option-group {\n          display: flex;\n          flex-direction: column;\n          gap: 4px;\n        }\n        \n        .option-label {\n          font-size: 12px;\n          font-weight: 500;\n          color: #24292e;\n        }\n        \n        /* Form Controls */\n        .select, .input {\n          padding: 8px 12px;\n          border: 1px solid #d1d5da;\n          border-radius: 4px;\n          font-size: 14px;\n          background: #fff;\n        }\n        \n        .select:focus, .input:focus {\n          outline: none;\n          border-color: #0366d6;\n          box-shadow: 0 0 0 2px rgba(3,102,214,0.1);\n        }\n        \n        /* Buttons */\n        .btn-primary, .btn-secondary, .btn-danger, .btn-small, .btn-icon {\n          padding: 8px 16px;\n          border-radius: 4px;\n          border: none;\n          font-size: 14px;\n          cursor: pointer;\n          display: inline-flex;\n          align-items: center;\n          gap: 6px;\n          font-weight: 500;\n        }\n        \n        .btn-primary {\n          background: #28a745;\n          color: #fff;\n        }\n        \n        .btn-primary:hover { background: #218838; }\n        \n        .btn-secondary {\n          background: #6c757d;\n          color: #fff;\n        }\n        \n        .btn-secondary:hover { background: #5a6268; }\n        \n        .btn-danger {\n          background: #dc3545;\n          color: #fff;\n        }\n        \n        .btn-small {\n          padding: 4px 8px;\n          font-size: 12px;\n        }\n        \n        .btn-icon {\n          padding: 6px;\n          background: transparent;\n          color: #586069;\n        }\n        \n        .disabled {\n          opacity: 0.5;\n          cursor: not-allowed !important;\n        }\n        \n        /* Actions */\n        .actions {\n          display: flex;\n          gap: 12px;\n          flex-wrap: wrap;\n        }\n        \n        /* Progress */\n        .progress-section {\n          margin-top: 16px;\n        }\n        \n        .progress-bar {\n          height: 6px;\n          background: #e1e4e8;\n          border-radius: 3px;\n          overflow: hidden;\n          margin-bottom: 8px;\n        }\n        \n        .progress-fill {\n          height: 100%;\n          background: #28a745;\n          transition: width 0.3s ease;\n        }\n        \n        .progress-text {\n          font-size: 12px;\n          color: #586069;\n          text-align: center;\n        }\n        \n        /* Warning */\n        .warning-message {\n          display: flex;\n          align-items: center;\n          gap: 8px;\n          padding: 12px;\n          background: #fff3cd;\n          border: 1px solid #ffeaa7;\n          border-radius: 4px;\n          color: #856404;\n          margin-top: 12px;\n        }\n        \n        /* Results */\n        .results-container {\n          max-height: 300px;\n          overflow-y: auto;\n        }\n        \n        .result-item {\n          border: 1px solid #e1e4e8;\n          border-radius: 6px;\n          padding: 12px;\n          margin-bottom: 12px;\n        }\n        \n        .result-item.success { border-color: #28a745; }\n        .result-item.error { border-color: #dc3545; }\n        \n        .result-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 8px;\n        }\n        \n        .result-index {\n          font-weight: 600;\n          color: #0366d6;\n        }\n        \n        .result-status {\n          font-size: 12px;\n          padding: 2px 6px;\n          border-radius: 3px;\n        }\n        \n        .result-status.success { background: #d4edda; color: #155724; }\n        .result-status.error { background: #f8d7da; color: #721c24; }\n        \n        .original-text, .translated-text, .error-text {\n          margin-bottom: 8px;\n        }\n        \n        .original-text label { color: #6c757d; }\n        .translated-text label { color: #28a745; }\n        .error-text label { color: #dc3545; }\n        \n        .text-content {\n          background: #f6f8fa;\n          padding: 8px;\n          border-radius: 4px;\n          margin-top: 4px;\n          font-size: 13px;\n          line-height: 1.4;\n        }\n        \n        .text-content.error { background: #f8d7da; }\n        \n        .result-actions {\n          display: flex;\n          gap: 8px;\n          margin-top: 12px;\n        }\n        \n        /* Engine Settings */\n        .engine-settings {\n          border: 1px solid #e1e4e8;\n          border-radius: 6px;\n          padding: 16px;\n          margin-bottom: 16px;\n        }\n        \n        .engine-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 12px;\n        }\n        \n        .engine-config.disabled {\n          opacity: 0.5;\n          pointer-events: none;\n        }\n        \n        .input-group {\n          margin-bottom: 12px;\n        }\n        \n        .input-label {\n          display: block;\n          margin-bottom: 4px;\n          font-size: 12px;\n          font-weight: 500;\n          color: #24292e;\n        }\n        \n        /* Switch */\n        .switch {\n          position: relative;\n          display: inline-block;\n          width: 40px;\n          height: 20px;\n        }\n        \n        .switch input {\n          opacity: 0;\n          width: 0;\n          height: 0;\n        }\n        \n        .slider {\n          position: absolute;\n          cursor: pointer;\n          top: 0;\n          left: 0;\n          right: 0;\n          bottom: 0;\n          background-color: #ccc;\n          transition: .4s;\n          border-radius: 20px;\n        }\n        \n        .slider:before {\n          position: absolute;\n          content: \"\";\n          height: 16px;\n          width: 16px;\n          left: 2px;\n          bottom: 2px;\n          background-color: white;\n          transition: .4s;\n          border-radius: 50%;\n        }\n        \n        input:checked + .slider {\n          background-color: #28a745;\n        }\n        \n        input:checked + .slider:before {\n          transform: translateX(20px);\n        }\n        \n        /* History */\n        .history-item {\n          border: 1px solid #e1e4e8;\n          border-radius: 6px;\n          padding: 12px;\n          margin-bottom: 12px;\n        }\n        \n        .history-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 8px;\n          font-size: 12px;\n          color: #586069;\n        }\n        \n        .history-content {\n          margin-bottom: 8px;\n        }\n        \n        .history-original {\n          color: #6c757d;\n          margin-bottom: 4px;\n        }\n        \n        .history-translated {\n          color: #28a745;\n        }\n        \n        /* Footer */\n        .footer {\n          background: #fff;\n          border-top: 1px solid #e1e4e8;\n          padding: 8px 16px;\n          flex-shrink: 0;\n        }\n        \n        .footer-content {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          font-size: 12px;\n          color: #586069;\n        }\n        \n        /* Notifications */\n        .notifications {\n          position: fixed;\n          top: 16px;\n          right: 16px;\n          z-index: 1000;\n        }\n        \n        .notification {\n          display: flex;\n          align-items: center;\n          gap: 8px;\n          padding: 12px 16px;\n          border-radius: 6px;\n          margin-bottom: 8px;\n          font-size: 14px;\n          box-shadow: 0 2px 8px rgba(0,0,0,0.15);\n        }\n        \n        .notification.success {\n          background: #d4edda;\n          border: 1px solid #c3e6cb;\n          color: #155724;\n        }\n        \n        .notification.error {\n          background: #f8d7da;\n          border: 1px solid #f5c6cb;\n          color: #721c24;\n        }\n        \n        .notification-close {\n          background: none;\n          border: none;\n          cursor: pointer;\n          font-size: 16px;\n          padding: 0;\n          margin-left: 8px;\n        }\n        \n        /* Empty State */\n        .empty-state {\n          text-align: center;\n          padding: 40px;\n          color: #586069;\n        }\n        \n        /* Settings Actions */\n        .settings-actions {\n          display: flex;\n          gap: 12px;\n          flex-wrap: wrap;\n        }\n        \n        .engine-actions {\n          margin-top: 12px;\n        }\n      </style>\n    `;\n  }\n\n  // Event binding\n  bindEvents(state) {\n    // Events are handled via onclick attributes in the HTML\n  }\n\n  // UI Actions\n  switchPage(page) {\n    appState.setState({ currentPage: page });\n  }\n\n  showSettings() {\n    this.switchPage('settings');\n  }\n\n  updateTranslationOption(key, value) {\n    appState.updateNested(`translation.${key}`, value);\n  }\n\n  toggleEngine(engineKey, enabled) {\n    appState.updateNested(`engines.${engineKey}.enabled`, enabled);\n  }\n\n  updateEngineConfig(engineKey, configKey, value) {\n    appState.updateNested(`engines.${engineKey}.${configKey}`, value);\n  }\n\n  refreshSelection() {\n    this.postMessage('get-selection');\n  }\n\n  startTranslation() {\n    const state = appState.state;\n    if (state.selection.textNodes === 0) {\n      this.showError('请先选择包含文本的节点');\n      return;\n    }\n\n    const currentEngine = state.engines[state.translation.currentEngine];\n    if (!currentEngine || !currentEngine.enabled || !currentEngine.apiKey) {\n      this.showError('请先配置有效的翻译引擎');\n      return;\n    }\n\n    appState.updateNested('translation.isTranslating', true);\n    appState.updateNested('translation.progress', 0);\n    appState.updateNested('translation.results', []);\n\n    this.postMessage('start-translation', {\n      engine: state.translation.currentEngine,\n      sourceLang: state.translation.sourceLang,\n      targetLang: state.translation.targetLang,\n      mode: state.translation.mode,\n      nodeIds: state.selection.nodeIds\n    });\n  }\n\n  cancelTranslation() {\n    appState.updateNested('translation.isTranslating', false);\n    this.postMessage('cancel-translation');\n  }\n\n  applyTranslation(index) {\n    const result = appState.state.translation.results[index];\n    if (result && result.status === 'success') {\n      this.postMessage('apply-translation', {\n        nodeId: result.nodeId,\n        translatedText: result.translatedText,\n        mode: appState.state.translation.mode\n      });\n    }\n  }\n\n  copyTranslation(index) {\n    const result = appState.state.translation.results[index];\n    if (result && result.translatedText) {\n      navigator.clipboard.writeText(result.translatedText).then(() => {\n        this.showSuccess('译文已复制到剪贴板');\n      }).catch(() => {\n        this.showError('复制失败');\n      });\n    }\n  }\n\n  testEngine(engineKey) {\n    const engine = appState.state.engines[engineKey];\n    if (!engine.apiKey) {\n      this.showError('请先输入API密钥');\n      return;\n    }\n\n    this.postMessage('test-engine', {\n      engine: engineKey,\n      config: engine\n    });\n  }\n\n  exportSettings() {\n    const settings = {\n      engines: appState.state.engines,\n      translation: {\n        sourceLang: appState.state.translation.sourceLang,\n        targetLang: appState.state.translation.targetLang,\n        mode: appState.state.translation.mode\n      }\n    };\n    \n    const blob = new Blob([JSON.stringify(settings, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'figma-translator-settings.json';\n    a.click();\n    URL.revokeObjectURL(url);\n    \n    this.showSuccess('设置已导出');\n  }\n\n  importSettings() {\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = '.json';\n    input.onchange = (e) => {\n      const file = e.target.files && e.target.files[0];\n      if (file) {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          try {\n            const result = e.target && e.target.result;\n            if (typeof result === 'string') {\n              const settings = JSON.parse(result);\n              if (settings.engines) {\n                appState.setState({ engines: settings.engines });\n              }\n              if (settings.translation) {\n                appState.updateNested('translation', { ...appState.state.translation, ...settings.translation });\n              }\n              this.showSuccess('设置已导入');\n            }\n          } catch (error) {\n            this.showError('设置文件格式错误');\n          }\n        };\n        reader.readAsText(file);\n      }\n    };\n    input.click();\n  }\n\n  clearHistory() {\n    if (confirm('确定要清除所有翻译历史吗？')) {\n      appState.setState({ history: [] });\n      this.showSuccess('历史记录已清除');\n    }\n  }\n\n  reuseTranslation(index) {\n    const item = appState.state.history[index];\n    if (item) {\n      appState.updateNested('translation.sourceLang', item.sourceLang);\n      appState.updateNested('translation.targetLang', item.targetLang);\n      appState.updateNested('translation.currentEngine', item.engine);\n      this.switchPage('translate');\n      this.showSuccess('翻译设置已应用');\n    }\n  }\n\n  // Message handling\n  setupMessageHandling() {\n    window.addEventListener('message', (event) => {\n      const message = event.data.pluginMessage;\n      if (!message) return;\n\n      console.log('UI received message:', message.type, message);\n      this.handleMessage(message);\n    });\n  }\n\n  handleMessage(message) {\n    switch (message.type) {\n      case 'plugin-ready':\n        this.showSuccess('插件已连接');\n        break;\n\n      case 'selection-changed':\n        appState.updateNested('selection', {\n          totalNodes: message.payload.nodeCount || 0,\n          textNodes: message.payload.hasTextNodes ? 1 : 0,\n          nodeIds: message.payload.nodeIds || [],\n          textContents: message.payload.textContents || []\n        });\n        break;\n\n      case 'selection-info':\n        appState.updateNested('selection', {\n          totalNodes: message.payload.totalNodes || 0,\n          textNodes: message.payload.textNodes || 0,\n          nodeIds: message.payload.nodeIds || [],\n          textContents: message.payload.textContents || []\n        });\n        break;\n\n      case 'translation-progress':\n        appState.updateNested('translation.progress', message.payload.progress);\n        break;\n\n      case 'translation-result':\n        const results = [...appState.state.translation.results];\n        results.push(message.payload);\n        appState.updateNested('translation.results', results);\n        break;\n\n      case 'translation-complete':\n        appState.updateNested('translation.isTranslating', false);\n        appState.updateNested('translation.progress', 100);\n        \n        // Add to history\n        const history = [...appState.state.history];\n        message.payload.results.forEach(result => {\n          if (result.status === 'success') {\n            history.unshift({\n              timestamp: new Date().toISOString(),\n              engine: appState.state.translation.currentEngine,\n              sourceLang: appState.state.translation.sourceLang,\n              targetLang: appState.state.translation.targetLang,\n              originalText: result.originalText,\n              translatedText: result.translatedText\n            });\n          }\n        });\n        appState.setState({ history: history.slice(0, 50) }); // Keep last 50\n        \n        this.showSuccess(`翻译完成！成功 ${message.payload.successCount} 个，失败 ${message.payload.failureCount} 个`);\n        break;\n\n      case 'translation-error':\n        appState.updateNested('translation.isTranslating', false);\n        this.showError(message.payload.error);\n        break;\n\n      case 'engine-test-result':\n        if (message.payload.success) {\n          this.showSuccess(`${message.payload.engine} 连接测试成功`);\n        } else {\n          this.showError(`${message.payload.engine} 连接测试失败: ${message.payload.error}`);\n        }\n        break;\n\n      case 'apply-result':\n        if (message.payload.success) {\n          this.showSuccess('翻译已应用到Figma');\n        } else {\n          this.showError(`应用失败: ${message.payload.error}`);\n        }\n        break;\n\n      default:\n        console.log('Unknown message type:', message.type);\n    }\n  }\n\n  postMessage(type, payload = {}) {\n    const message = { type, payload };\n    console.log('Sending message:', message);\n    \n    parent.postMessage({\n      pluginMessage: message\n    }, '*');\n  }\n\n  // Utility methods\n  truncateText(text, maxLength) {\n    if (!text) return '';\n    return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;\n  }\n\n  escapeHtml(text) {\n    if (!text) return '';\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n  }\n\n  formatDate(isoString) {\n    return new Date(isoString).toLocaleString('zh-CN');\n  }\n\n  getModelOptions(engineKey, currentModel) {\n    const models = {\n      openai: [\n        'gpt-3.5-turbo-instruct',\n        'gpt-4',\n        'gpt-4-turbo'\n      ],\n      gemini: [\n        'gemini-pro',\n        'gemini-1.5-pro',\n        'gemini-1.5-flash'\n      ]\n    };\n\n    return (models[engineKey] || []).map(model => \n      `<option value=\"${model}\" ${model === currentModel ? 'selected' : ''}>${model}</option>`\n    ).join('');\n  }\n\n  showError(message) {\n    appState.setState({ error: message });\n    setTimeout(() => {\n      appState.setState({ error: null });\n    }, 5000);\n  }\n\n  showSuccess(message) {\n    appState.setState({ success: message });\n    setTimeout(() => {\n      appState.setState({ success: null });\n    }, 3000);\n  }\n\n  clearError() {\n    appState.setState({ error: null });\n  }\n\n  clearSuccess() {\n    appState.setState({ success: null });\n  }\n}\n\n// Initialize UI\nlet ui;\n\nfunction initProductionUI() {\n  console.log('Initializing production UI...');\n  ui = new UI();\n  \n  // Make ui globally available for onclick handlers\n  window.ui = ui;\n  \n  console.log('Production UI initialized successfully');\n}\n\n// Start initialization\ndocument.addEventListener('DOMContentLoaded', initProductionUI);\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', initProductionUI);\n} else {\n  initProductionUI();\n}\n\nconsole.log('Production UI script loaded');"],"names":["console","log","appState","constructor","this","state","currentPage","selection","totalNodes","textNodes","nodeIds","textContents","translation","isTranslating","progress","results","currentEngine","sourceLang","targetLang","mode","engines","openai","apiKey","model","enabled","gemini","history","error","success","listeners","subscribe","listener","push","filter","l","setState","updater","updates","forEach","updateNested","path","value","keys","split","current","target","i","length","UI","container","init","document","getElementById","render","setupMessageHandling","innerHTML","renderHeader","renderNavigation","renderContent","renderFooter","renderNotifications","renderStyles","bindEvents","id","label","icon","map","tab","join","renderTranslatePage","renderSettingsPage","renderHistoryPage","renderSelectionInfo","renderTranslationOptions","renderTranslationActions","renderTranslationResults","hasSelection","slice","text","truncateText","availableEngines","Object","entries","_","config","key","canTranslate","hasValidEngine","values","some","engine","Math","round","result","index","status","escapeHtml","originalText","translatedText","renderEngineSettings","engineKey","engineName","getModelOptions","item","formatDate","timestamp","notifications","switchPage","page","showSettings","updateTranslationOption","toggleEngine","updateEngineConfig","configKey","refreshSelection","postMessage","startTranslation","showError","cancelTranslation","applyTranslation","nodeId","copyTranslation","navigator","clipboard","writeText","then","showSuccess","catch","testEngine","exportSettings","settings","blob","Blob","JSON","stringify","type","url","URL","createObjectURL","a","createElement","href","download","click","revokeObjectURL","importSettings","input","accept","onchange","e","file","files","reader","FileReader","onload","parse","readAsText","clearHistory","confirm","reuseTranslation","window","addEventListener","event","message","data","pluginMessage","handleMessage","payload","nodeCount","hasTextNodes","unshift","Date","toISOString","successCount","failureCount","parent","maxLength","substring","div","textContent","isoString","toLocaleString","currentModel","setTimeout","clearError","clearSuccess","ui","initProductionUI","readyState"],"sourceRoot":""}