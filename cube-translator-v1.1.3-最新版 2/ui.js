(()=>{console.log("Production UI loading...");const n=new class{constructor(){this.state={currentPage:"translate",selection:{totalNodes:0,textNodes:0,nodeIds:[],textContents:[]},translation:{isTranslating:!1,progress:0,results:[],currentEngine:"openai",sourceLang:"auto",targetLang:"zh-CN",mode:"replace"},engines:{openai:{apiKey:"",model:"gpt-3.5-turbo-instruct",enabled:!1},gemini:{apiKey:"",model:"gemini-pro",enabled:!1}},history:[],error:null,success:null},this.listeners=[]}subscribe(n){return this.listeners.push(n),()=>{this.listeners=this.listeners.filter(e=>e!==n)}}setState(n){if("function"==typeof n){const e=n(this.state);this.state={...this.state,...e}}else this.state={...this.state,...n};this.listeners.forEach(n=>n(this.state))}updateNested(n,e){const t=n.split(".");let s={...this.state},o=s;for(let n=0;n<t.length-1;n++)o[t[n]]={...o[t[n]]},o=o[t[n]];o[t[t.length-1]]=e,this.setState(s)}};class e{constructor(){this.container=null,this.init()}init(){console.log("Initializing production UI"),this.container=document.getElementById("root"),this.container?(n.subscribe(n=>{this.render(n)}),this.setupMessageHandling(),this.render(n.state),console.log("Production UI initialized")):console.error("Root container not found")}render(n){this.container&&(this.container.innerHTML=`\n      <div class="app">\n        ${this.renderHeader(n)}\n        ${this.renderNavigation(n)}\n        ${this.renderContent(n)}\n        ${this.renderFooter(n)}\n        ${this.renderNotifications(n)}\n      </div>\n      ${this.renderStyles()}\n    `,this.bindEvents(n))}renderHeader(n){return'\n      <header class="header">\n        <div class="header-content">\n          <div class="logo">\n            <span class="logo-icon">🌍</span>\n            <span class="logo-text">Advanced Translator</span>\n          </div>\n          <div class="header-actions">\n            <button class="btn-icon" onclick="ui.showSettings()" title="设置">\n              ⚙️\n            </button>\n          </div>\n        </div>\n      </header>\n    '}renderNavigation(n){return`\n      <nav class="navigation">\n        ${[{id:"translate",label:"翻译",icon:"🌍"},{id:"settings",label:"设置",icon:"⚙️"},{id:"history",label:"历史",icon:"📚"}].map(e=>`\n          <button \n            class="nav-tab ${n.currentPage===e.id?"active":""}"\n            onclick="ui.switchPage('${e.id}')"\n          >\n            <span class="nav-icon">${e.icon}</span>\n            <span class="nav-label">${e.label}</span>\n          </button>\n        `).join("")}\n      </nav>\n    `}renderContent(n){switch(n.currentPage){case"translate":default:return this.renderTranslatePage(n);case"settings":return this.renderSettingsPage(n);case"history":return this.renderHistoryPage(n)}}renderTranslatePage(n){return`\n      <main class="content">\n        ${this.renderSelectionInfo(n)}\n        ${this.renderTranslationOptions(n)}\n        ${this.renderTranslationActions(n)}\n        ${this.renderTranslationResults(n)}\n      </main>\n    `}renderSelectionInfo(n){const{selection:e}=n,t=e.textNodes>0;return`\n      <section class="section">\n        <h3 class="section-title">\n          <span class="section-icon">📋</span>\n          选择信息\n        </h3>\n        <div class="selection-card ${t?"has-selection":""}">\n          <div class="selection-stats">\n            <div class="stat">\n              <span class="stat-value">${e.totalNodes}</span>\n              <span class="stat-label">总节点</span>\n            </div>\n            <div class="stat">\n              <span class="stat-value">${e.textNodes}</span>\n              <span class="stat-label">文本节点</span>\n            </div>\n          </div>\n          ${t?`\n            <div class="selection-preview">\n              <h4>文本预览</h4>\n              <div class="text-preview">\n                ${e.textContents.slice(0,3).map(n=>`\n                  <div class="text-item">${this.truncateText(n,50)}</div>\n                `).join("")}\n                ${e.textContents.length>3?`\n                  <div class="text-more">还有 ${e.textContents.length-3} 个文本...</div>\n                `:""}\n              </div>\n            </div>\n          `:'\n            <div class="selection-empty">\n              <p>请在Figma中选择包含文本的节点</p>\n              <button class="btn-secondary" onclick="ui.refreshSelection()">\n                刷新选择\n              </button>\n            </div>\n          '}\n        </div>\n      </section>\n    `}renderTranslationOptions(n){const{translation:e,engines:t}=n,s=Object.entries(t).filter(([n,e])=>e.enabled);return`\n      <section class="section">\n        <h3 class="section-title">\n          <span class="section-icon">⚙️</span>\n          翻译选项\n        </h3>\n        <div class="options-grid">\n          <div class="option-group">\n            <label class="option-label">翻译引擎</label>\n            <select class="select" onchange="ui.updateTranslationOption('currentEngine', this.value)">\n              ${s.length>0?s.map(([n,t])=>`\n                <option value="${n}" ${e.currentEngine===n?"selected":""}>\n                  ${"openai"===n?"OpenAI":"Google Gemini"} (${t.model})\n                </option>\n              `).join(""):'\n                <option value="">请先在设置中配置API</option>\n              '}\n            </select>\n          </div>\n          \n          <div class="option-group">\n            <label class="option-label">源语言</label>\n            <select class="select" onchange="ui.updateTranslationOption('sourceLang', this.value)">\n              <option value="auto" ${"auto"===e.sourceLang?"selected":""}>自动检测</option>\n              <option value="en" ${"en"===e.sourceLang?"selected":""}>英语</option>\n              <option value="zh-CN" ${"zh-CN"===e.sourceLang?"selected":""}>中文(简体)</option>\n              <option value="zh-TW" ${"zh-TW"===e.sourceLang?"selected":""}>中文(繁體)</option>\n              <option value="ja" ${"ja"===e.sourceLang?"selected":""}>日语</option>\n              <option value="ko" ${"ko"===e.sourceLang?"selected":""}>韩语</option>\n              <option value="fr" ${"fr"===e.sourceLang?"selected":""}>法语</option>\n              <option value="de" ${"de"===e.sourceLang?"selected":""}>德语</option>\n              <option value="es" ${"es"===e.sourceLang?"selected":""}>西班牙语</option>\n            </select>\n          </div>\n          \n          <div class="option-group">\n            <label class="option-label">目标语言</label>\n            <select class="select" onchange="ui.updateTranslationOption('targetLang', this.value)">\n              <option value="zh-CN" ${"zh-CN"===e.targetLang?"selected":""}>中文(简体)</option>\n              <option value="zh-TW" ${"zh-TW"===e.targetLang?"selected":""}>中文(繁體)</option>\n              <option value="en" ${"en"===e.targetLang?"selected":""}>英语</option>\n              <option value="ja" ${"ja"===e.targetLang?"selected":""}>日语</option>\n              <option value="ko" ${"ko"===e.targetLang?"selected":""}>韩语</option>\n              <option value="fr" ${"fr"===e.targetLang?"selected":""}>法语</option>\n              <option value="de" ${"de"===e.targetLang?"selected":""}>德语</option>\n              <option value="es" ${"es"===e.targetLang?"selected":""}>西班牙语</option>\n            </select>\n          </div>\n          \n          <div class="option-group">\n            <label class="option-label">输出模式</label>\n            <select class="select" onchange="ui.updateTranslationOption('mode', this.value)">\n              <option value="replace" ${"replace"===e.mode?"selected":""}>替换原文</option>\n              <option value="beside" ${"beside"===e.mode?"selected":""}>原文旁边</option>\n              <option value="newFrame" ${"newFrame"===e.mode?"selected":""}>新建框架</option>\n              <option value="newPage" ${"newPage"===e.mode?"selected":""}>新建页面</option>\n            </select>\n          </div>\n        </div>\n      </section>\n    `}renderTranslationActions(n){const{translation:e,selection:t}=n,s=t.textNodes>0&&!e.isTranslating,o=Object.values(n.engines).some(n=>n.enabled);return`\n      <section class="section">\n        <div class="actions">\n          <button \n            class="btn-primary ${s&&o?"":"disabled"}"\n            onclick="ui.startTranslation()"\n            ${s&&o?"":"disabled"}\n          >\n            ${e.isTranslating?"🔄 翻译中...":"🚀 开始翻译"}\n          </button>\n          \n          ${e.isTranslating?'\n            <button class="btn-secondary" onclick="ui.cancelTranslation()">\n              取消翻译\n            </button>\n          ':""}\n          \n          <button class="btn-secondary" onclick="ui.refreshSelection()">\n            🔄 刷新选择\n          </button>\n        </div>\n        \n        ${e.isTranslating?`\n          <div class="progress-section">\n            <div class="progress-bar">\n              <div class="progress-fill" style="width: ${e.progress}%"></div>\n            </div>\n            <div class="progress-text">\n              翻译进度: ${Math.round(e.progress)}%\n            </div>\n          </div>\n        `:""}\n        \n        ${o?"":'\n          <div class="warning-message">\n            <span class="warning-icon">⚠️</span>\n            请先在设置中配置翻译引擎API密钥\n          </div>\n        '}\n      </section>\n    `}renderTranslationResults(n){const{translation:e}=n;return 0===e.results.length?"":`\n      <section class="section">\n        <h3 class="section-title">\n          <span class="section-icon">📄</span>\n          翻译结果\n        </h3>\n        <div class="results-container">\n          ${e.results.map((n,e)=>`\n            <div class="result-item ${n.status}">\n              <div class="result-header">\n                <span class="result-index">${e+1}</span>\n                <span class="result-status ${n.status}">\n                  ${"success"===n.status?"✅ 成功":"error"===n.status?"❌ 失败":"⏳ 处理中"}\n                </span>\n              </div>\n              <div class="result-content">\n                <div class="original-text">\n                  <label>原文:</label>\n                  <div class="text-content">${this.escapeHtml(n.originalText)}</div>\n                </div>\n                ${n.translatedText?`\n                  <div class="translated-text">\n                    <label>译文:</label>\n                    <div class="text-content">${this.escapeHtml(n.translatedText)}</div>\n                  </div>\n                `:""}\n                ${n.error?`\n                  <div class="error-text">\n                    <label>错误:</label>\n                    <div class="text-content error">${this.escapeHtml(n.error)}</div>\n                  </div>\n                `:""}\n              </div>\n              ${"success"===n.status?`\n                <div class="result-actions">\n                  <button class="btn-small" onclick="ui.applyTranslation(${e})">\n                    应用翻译\n                  </button>\n                  <button class="btn-small secondary" onclick="ui.copyTranslation(${e})">\n                    复制译文\n                  </button>\n                </div>\n              `:""}\n            </div>\n          `).join("")}\n        </div>\n      </section>\n    `}renderSettingsPage(n){return`\n      <main class="content">\n        <section class="section">\n          <h3 class="section-title">\n            <span class="section-icon">🔑</span>\n            API配置\n          </h3>\n          ${this.renderEngineSettings("openai","OpenAI",n)}\n          ${this.renderEngineSettings("gemini","Google Gemini",n)}\n        </section>\n        \n        <section class="section">\n          <h3 class="section-title">\n            <span class="section-icon">💾</span>\n            数据管理\n          </h3>\n          <div class="settings-actions">\n            <button class="btn-secondary" onclick="ui.exportSettings()">\n              导出设置\n            </button>\n            <button class="btn-secondary" onclick="ui.importSettings()">\n              导入设置\n            </button>\n            <button class="btn-danger" onclick="ui.clearHistory()">\n              清除历史\n            </button>\n          </div>\n        </section>\n      </main>\n    `}renderEngineSettings(n,e,t){const s=t.engines[n];return`\n      <div class="engine-settings">\n        <div class="engine-header">\n          <h4>${e}</h4>\n          <label class="switch">\n            <input \n              type="checkbox" \n              ${s.enabled?"checked":""}\n              onchange="ui.toggleEngine('${n}', this.checked)"\n            >\n            <span class="slider"></span>\n          </label>\n        </div>\n        \n        <div class="engine-config ${s.enabled?"":"disabled"}">\n          <div class="input-group">\n            <label class="input-label">API密钥</label>\n            <input \n              type="password" \n              class="input" \n              placeholder="输入您的${e} API密钥"\n              value="${s.apiKey}"\n              onchange="ui.updateEngineConfig('${n}', 'apiKey', this.value)"\n            >\n          </div>\n          \n          <div class="input-group">\n            <label class="input-label">模型</label>\n            <select \n              class="select"\n              onchange="ui.updateEngineConfig('${n}', 'model', this.value)"\n            >\n              ${this.getModelOptions(n,s.model)}\n            </select>\n          </div>\n          \n          <div class="engine-actions">\n            <button \n              class="btn-small" \n              onclick="ui.testEngine('${n}')"\n              ${s.apiKey?"":"disabled"}\n            >\n              测试连接\n            </button>\n          </div>\n        </div>\n      </div>\n    `}renderHistoryPage(n){return`\n      <main class="content">\n        <section class="section">\n          <h3 class="section-title">\n            <span class="section-icon">📚</span>\n            翻译历史\n          </h3>\n          ${n.history.length>0?`\n            <div class="history-list">\n              ${n.history.map((n,e)=>`\n                <div class="history-item">\n                  <div class="history-header">\n                    <span class="history-date">${this.formatDate(n.timestamp)}</span>\n                    <span class="history-engine">${n.engine}</span>\n                  </div>\n                  <div class="history-content">\n                    <div class="history-original">${this.truncateText(n.originalText,100)}</div>\n                    <div class="history-translated">${this.truncateText(n.translatedText,100)}</div>\n                  </div>\n                  <div class="history-actions">\n                    <button class="btn-small" onclick="ui.reuseTranslation(${e})">\n                      重用\n                    </button>\n                  </div>\n                </div>\n              `).join("")}\n            </div>\n          `:'\n            <div class="empty-state">\n              <p>暂无翻译历史</p>\n            </div>\n          '}\n        </section>\n      </main>\n    `}renderFooter(n){return'\n      <footer class="footer">\n        <div class="footer-content">\n          <span class="version">v1.0.0</span>\n          <span class="status">\n            就绪\n          </span>\n        </div>\n      </footer>\n    '}renderNotifications(n){let e="";return n.error&&(e+=`\n        <div class="notification error">\n          <span class="notification-icon">❌</span>\n          <span class="notification-text">${n.error}</span>\n          <button class="notification-close" onclick="ui.clearError()">×</button>\n        </div>\n      `),n.success&&(e+=`\n        <div class="notification success">\n          <span class="notification-icon">✅</span>\n          <span class="notification-text">${n.success}</span>\n          <button class="notification-close" onclick="ui.clearSuccess()">×</button>\n        </div>\n      `),e?`<div class="notifications">${e}</div>`:""}renderStyles(){return"\n      <style>\n        * { margin: 0; padding: 0; box-sizing: border-box; }\n        \n        .app {\n          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n          font-size: 14px;\n          height: 100vh;\n          display: flex;\n          flex-direction: column;\n          background: #f5f5f5;\n        }\n        \n        /* Header */\n        .header {\n          background: #fff;\n          border-bottom: 1px solid #e1e4e8;\n          padding: 12px 16px;\n          flex-shrink: 0;\n        }\n        \n        .header-content {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n        }\n        \n        .logo {\n          display: flex;\n          align-items: center;\n          gap: 8px;\n          font-weight: 600;\n          color: #0366d6;\n        }\n        \n        .logo-icon { font-size: 18px; }\n        \n        /* Navigation */\n        .navigation {\n          background: #fff;\n          border-bottom: 1px solid #e1e4e8;\n          display: flex;\n          padding: 0 16px;\n          flex-shrink: 0;\n        }\n        \n        .nav-tab {\n          background: none;\n          border: none;\n          padding: 12px 16px;\n          display: flex;\n          align-items: center;\n          gap: 6px;\n          cursor: pointer;\n          color: #586069;\n          border-bottom: 2px solid transparent;\n          font-size: 13px;\n        }\n        \n        .nav-tab:hover { color: #0366d6; }\n        \n        .nav-tab.active {\n          color: #0366d6;\n          border-bottom-color: #0366d6;\n        }\n        \n        /* Content */\n        .content {\n          flex: 1;\n          overflow-y: auto;\n          padding: 16px;\n        }\n        \n        .section {\n          background: #fff;\n          border-radius: 8px;\n          padding: 16px;\n          margin-bottom: 16px;\n          box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n        }\n        \n        .section-title {\n          display: flex;\n          align-items: center;\n          gap: 8px;\n          font-size: 16px;\n          font-weight: 600;\n          margin-bottom: 16px;\n          color: #24292e;\n        }\n        \n        /* Selection Info */\n        .selection-card {\n          border: 1px solid #e1e4e8;\n          border-radius: 6px;\n          padding: 16px;\n        }\n        \n        .selection-card.has-selection {\n          border-color: #28a745;\n          background: #f8fff8;\n        }\n        \n        .selection-stats {\n          display: flex;\n          gap: 24px;\n          margin-bottom: 16px;\n        }\n        \n        .stat {\n          text-align: center;\n        }\n        \n        .stat-value {\n          display: block;\n          font-size: 24px;\n          font-weight: 600;\n          color: #0366d6;\n        }\n        \n        .stat-label {\n          font-size: 12px;\n          color: #586069;\n        }\n        \n        .text-preview {\n          max-height: 120px;\n          overflow-y: auto;\n        }\n        \n        .text-item {\n          padding: 8px;\n          background: #f6f8fa;\n          border-radius: 4px;\n          margin-bottom: 4px;\n          font-size: 12px;\n        }\n        \n        .text-more {\n          font-size: 12px;\n          color: #586069;\n          font-style: italic;\n        }\n        \n        .selection-empty {\n          text-align: center;\n          color: #586069;\n        }\n        \n        /* Options */\n        .options-grid {\n          display: grid;\n          grid-template-columns: 1fr 1fr;\n          gap: 16px;\n        }\n        \n        .option-group {\n          display: flex;\n          flex-direction: column;\n          gap: 4px;\n        }\n        \n        .option-label {\n          font-size: 12px;\n          font-weight: 500;\n          color: #24292e;\n        }\n        \n        /* Form Controls */\n        .select, .input {\n          padding: 8px 12px;\n          border: 1px solid #d1d5da;\n          border-radius: 4px;\n          font-size: 14px;\n          background: #fff;\n        }\n        \n        .select:focus, .input:focus {\n          outline: none;\n          border-color: #0366d6;\n          box-shadow: 0 0 0 2px rgba(3,102,214,0.1);\n        }\n        \n        /* Buttons */\n        .btn-primary, .btn-secondary, .btn-danger, .btn-small, .btn-icon {\n          padding: 8px 16px;\n          border-radius: 4px;\n          border: none;\n          font-size: 14px;\n          cursor: pointer;\n          display: inline-flex;\n          align-items: center;\n          gap: 6px;\n          font-weight: 500;\n        }\n        \n        .btn-primary {\n          background: #28a745;\n          color: #fff;\n        }\n        \n        .btn-primary:hover { background: #218838; }\n        \n        .btn-secondary {\n          background: #6c757d;\n          color: #fff;\n        }\n        \n        .btn-secondary:hover { background: #5a6268; }\n        \n        .btn-danger {\n          background: #dc3545;\n          color: #fff;\n        }\n        \n        .btn-small {\n          padding: 4px 8px;\n          font-size: 12px;\n        }\n        \n        .btn-icon {\n          padding: 6px;\n          background: transparent;\n          color: #586069;\n        }\n        \n        .disabled {\n          opacity: 0.5;\n          cursor: not-allowed !important;\n        }\n        \n        /* Actions */\n        .actions {\n          display: flex;\n          gap: 12px;\n          flex-wrap: wrap;\n        }\n        \n        /* Progress */\n        .progress-section {\n          margin-top: 16px;\n        }\n        \n        .progress-bar {\n          height: 6px;\n          background: #e1e4e8;\n          border-radius: 3px;\n          overflow: hidden;\n          margin-bottom: 8px;\n        }\n        \n        .progress-fill {\n          height: 100%;\n          background: #28a745;\n          transition: width 0.3s ease;\n        }\n        \n        .progress-text {\n          font-size: 12px;\n          color: #586069;\n          text-align: center;\n        }\n        \n        /* Warning */\n        .warning-message {\n          display: flex;\n          align-items: center;\n          gap: 8px;\n          padding: 12px;\n          background: #fff3cd;\n          border: 1px solid #ffeaa7;\n          border-radius: 4px;\n          color: #856404;\n          margin-top: 12px;\n        }\n        \n        /* Results */\n        .results-container {\n          max-height: 300px;\n          overflow-y: auto;\n        }\n        \n        .result-item {\n          border: 1px solid #e1e4e8;\n          border-radius: 6px;\n          padding: 12px;\n          margin-bottom: 12px;\n        }\n        \n        .result-item.success { border-color: #28a745; }\n        .result-item.error { border-color: #dc3545; }\n        \n        .result-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 8px;\n        }\n        \n        .result-index {\n          font-weight: 600;\n          color: #0366d6;\n        }\n        \n        .result-status {\n          font-size: 12px;\n          padding: 2px 6px;\n          border-radius: 3px;\n        }\n        \n        .result-status.success { background: #d4edda; color: #155724; }\n        .result-status.error { background: #f8d7da; color: #721c24; }\n        \n        .original-text, .translated-text, .error-text {\n          margin-bottom: 8px;\n        }\n        \n        .original-text label { color: #6c757d; }\n        .translated-text label { color: #28a745; }\n        .error-text label { color: #dc3545; }\n        \n        .text-content {\n          background: #f6f8fa;\n          padding: 8px;\n          border-radius: 4px;\n          margin-top: 4px;\n          font-size: 13px;\n          line-height: 1.4;\n        }\n        \n        .text-content.error { background: #f8d7da; }\n        \n        .result-actions {\n          display: flex;\n          gap: 8px;\n          margin-top: 12px;\n        }\n        \n        /* Engine Settings */\n        .engine-settings {\n          border: 1px solid #e1e4e8;\n          border-radius: 6px;\n          padding: 16px;\n          margin-bottom: 16px;\n        }\n        \n        .engine-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 12px;\n        }\n        \n        .engine-config.disabled {\n          opacity: 0.5;\n          pointer-events: none;\n        }\n        \n        .input-group {\n          margin-bottom: 12px;\n        }\n        \n        .input-label {\n          display: block;\n          margin-bottom: 4px;\n          font-size: 12px;\n          font-weight: 500;\n          color: #24292e;\n        }\n        \n        /* Switch */\n        .switch {\n          position: relative;\n          display: inline-block;\n          width: 40px;\n          height: 20px;\n        }\n        \n        .switch input {\n          opacity: 0;\n          width: 0;\n          height: 0;\n        }\n        \n        .slider {\n          position: absolute;\n          cursor: pointer;\n          top: 0;\n          left: 0;\n          right: 0;\n          bottom: 0;\n          background-color: #ccc;\n          transition: .4s;\n          border-radius: 20px;\n        }\n        \n        .slider:before {\n          position: absolute;\n          content: \"\";\n          height: 16px;\n          width: 16px;\n          left: 2px;\n          bottom: 2px;\n          background-color: white;\n          transition: .4s;\n          border-radius: 50%;\n        }\n        \n        input:checked + .slider {\n          background-color: #28a745;\n        }\n        \n        input:checked + .slider:before {\n          transform: translateX(20px);\n        }\n        \n        /* History */\n        .history-item {\n          border: 1px solid #e1e4e8;\n          border-radius: 6px;\n          padding: 12px;\n          margin-bottom: 12px;\n        }\n        \n        .history-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 8px;\n          font-size: 12px;\n          color: #586069;\n        }\n        \n        .history-content {\n          margin-bottom: 8px;\n        }\n        \n        .history-original {\n          color: #6c757d;\n          margin-bottom: 4px;\n        }\n        \n        .history-translated {\n          color: #28a745;\n        }\n        \n        /* Footer */\n        .footer {\n          background: #fff;\n          border-top: 1px solid #e1e4e8;\n          padding: 8px 16px;\n          flex-shrink: 0;\n        }\n        \n        .footer-content {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          font-size: 12px;\n          color: #586069;\n        }\n        \n        /* Notifications */\n        .notifications {\n          position: fixed;\n          top: 16px;\n          right: 16px;\n          z-index: 1000;\n        }\n        \n        .notification {\n          display: flex;\n          align-items: center;\n          gap: 8px;\n          padding: 12px 16px;\n          border-radius: 6px;\n          margin-bottom: 8px;\n          font-size: 14px;\n          box-shadow: 0 2px 8px rgba(0,0,0,0.15);\n        }\n        \n        .notification.success {\n          background: #d4edda;\n          border: 1px solid #c3e6cb;\n          color: #155724;\n        }\n        \n        .notification.error {\n          background: #f8d7da;\n          border: 1px solid #f5c6cb;\n          color: #721c24;\n        }\n        \n        .notification-close {\n          background: none;\n          border: none;\n          cursor: pointer;\n          font-size: 16px;\n          padding: 0;\n          margin-left: 8px;\n        }\n        \n        /* Empty State */\n        .empty-state {\n          text-align: center;\n          padding: 40px;\n          color: #586069;\n        }\n        \n        /* Settings Actions */\n        .settings-actions {\n          display: flex;\n          gap: 12px;\n          flex-wrap: wrap;\n        }\n        \n        .engine-actions {\n          margin-top: 12px;\n        }\n      </style>\n    "}bindEvents(n){}switchPage(e){n.setState({currentPage:e})}showSettings(){this.switchPage("settings")}updateTranslationOption(e,t){n.updateNested(`translation.${e}`,t)}toggleEngine(e,t){n.updateNested(`engines.${e}.enabled`,t)}updateEngineConfig(e,t,s){n.updateNested(`engines.${e}.${t}`,s)}refreshSelection(){this.postMessage("get-selection")}startTranslation(){const e=n.state;if(0===e.selection.textNodes)return void this.showError("请先选择包含文本的节点");const t=e.engines[e.translation.currentEngine];t&&t.enabled&&t.apiKey?(n.updateNested("translation.isTranslating",!0),n.updateNested("translation.progress",0),n.updateNested("translation.results",[]),this.postMessage("start-translation",{engine:e.translation.currentEngine,sourceLang:e.translation.sourceLang,targetLang:e.translation.targetLang,mode:e.translation.mode,nodeIds:e.selection.nodeIds})):this.showError("请先配置有效的翻译引擎")}cancelTranslation(){n.updateNested("translation.isTranslating",!1),this.postMessage("cancel-translation")}applyTranslation(e){const t=n.state.translation.results[e];t&&"success"===t.status&&this.postMessage("apply-translation",{nodeId:t.nodeId,translatedText:t.translatedText,mode:n.state.translation.mode})}copyTranslation(e){const t=n.state.translation.results[e];t&&t.translatedText&&navigator.clipboard.writeText(t.translatedText).then(()=>{this.showSuccess("译文已复制到剪贴板")}).catch(()=>{this.showError("复制失败")})}testEngine(e){const t=n.state.engines[e];t.apiKey?this.postMessage("test-engine",{engine:e,config:t}):this.showError("请先输入API密钥")}exportSettings(){const e={engines:n.state.engines,translation:{sourceLang:n.state.translation.sourceLang,targetLang:n.state.translation.targetLang,mode:n.state.translation.mode}},t=new Blob([JSON.stringify(e,null,2)],{type:"application/json"}),s=URL.createObjectURL(t),o=document.createElement("a");o.href=s,o.download="figma-translator-settings.json",o.click(),URL.revokeObjectURL(s),this.showSuccess("设置已导出")}importSettings(){const e=document.createElement("input");e.type="file",e.accept=".json",e.onchange=e=>{const t=e.target.files&&e.target.files[0];if(t){const e=new FileReader;e.onload=e=>{try{const t=e.target&&e.target.result;if("string"==typeof t){const e=JSON.parse(t);e.engines&&n.setState({engines:e.engines}),e.translation&&n.updateNested("translation",{...n.state.translation,...e.translation}),this.showSuccess("设置已导入")}}catch(n){this.showError("设置文件格式错误")}},e.readAsText(t)}},e.click()}clearHistory(){confirm("确定要清除所有翻译历史吗？")&&(n.setState({history:[]}),this.showSuccess("历史记录已清除"))}reuseTranslation(e){const t=n.state.history[e];t&&(n.updateNested("translation.sourceLang",t.sourceLang),n.updateNested("translation.targetLang",t.targetLang),n.updateNested("translation.currentEngine",t.engine),this.switchPage("translate"),this.showSuccess("翻译设置已应用"))}setupMessageHandling(){window.addEventListener("message",n=>{const e=n.data.pluginMessage;e&&(console.log("UI received message:",e.type,e),this.handleMessage(e))})}handleMessage(e){switch(e.type){case"plugin-ready":this.showSuccess("插件已连接");break;case"selection-changed":n.updateNested("selection",{totalNodes:e.payload.nodeCount||0,textNodes:e.payload.hasTextNodes?1:0,nodeIds:e.payload.nodeIds||[],textContents:e.payload.textContents||[]});break;case"selection-info":n.updateNested("selection",{totalNodes:e.payload.totalNodes||0,textNodes:e.payload.textNodes||0,nodeIds:e.payload.nodeIds||[],textContents:e.payload.textContents||[]});break;case"translation-progress":n.updateNested("translation.progress",e.payload.progress);break;case"translation-result":const t=[...n.state.translation.results];t.push(e.payload),n.updateNested("translation.results",t);break;case"translation-complete":n.updateNested("translation.isTranslating",!1),n.updateNested("translation.progress",100);const s=[...n.state.history];e.payload.results.forEach(e=>{"success"===e.status&&s.unshift({timestamp:(new Date).toISOString(),engine:n.state.translation.currentEngine,sourceLang:n.state.translation.sourceLang,targetLang:n.state.translation.targetLang,originalText:e.originalText,translatedText:e.translatedText})}),n.setState({history:s.slice(0,50)}),this.showSuccess(`翻译完成！成功 ${e.payload.successCount} 个，失败 ${e.payload.failureCount} 个`);break;case"translation-error":n.updateNested("translation.isTranslating",!1),this.showError(e.payload.error);break;case"engine-test-result":e.payload.success?this.showSuccess(`${e.payload.engine} 连接测试成功`):this.showError(`${e.payload.engine} 连接测试失败: ${e.payload.error}`);break;case"apply-result":e.payload.success?this.showSuccess("翻译已应用到Figma"):this.showError(`应用失败: ${e.payload.error}`);break;default:console.log("Unknown message type:",e.type)}}postMessage(n,e={}){const t={type:n,payload:e};console.log("Sending message:",t),parent.postMessage({pluginMessage:t},"*")}truncateText(n,e){return n?n.length>e?n.substring(0,e)+"...":n:""}escapeHtml(n){if(!n)return"";const e=document.createElement("div");return e.textContent=n,e.innerHTML}formatDate(n){return new Date(n).toLocaleString("zh-CN")}getModelOptions(n,e){return({openai:["gpt-3.5-turbo-instruct","gpt-4","gpt-4-turbo"],gemini:["gemini-pro","gemini-1.5-pro","gemini-1.5-flash"]}[n]||[]).map(n=>`<option value="${n}" ${n===e?"selected":""}>${n}</option>`).join("")}showError(e){n.setState({error:e}),setTimeout(()=>{n.setState({error:null})},5e3)}showSuccess(e){n.setState({success:e}),setTimeout(()=>{n.setState({success:null})},3e3)}clearError(){n.setState({error:null})}clearSuccess(){n.setState({success:null})}}let t;function s(){console.log("Initializing production UI..."),t=new e,window.ui=t,console.log("Production UI initialized successfully")}document.addEventListener("DOMContentLoaded",s),"loading"===document.readyState?document.addEventListener("DOMContentLoaded",s):s(),console.log("Production UI script loaded")})();
//# sourceMappingURL=ui.js.map