(()=>{console.log("Optimized Production Plugin loading...");const e={auto:"auto-detected language",en:"English","zh-CN":"Simplified Chinese","zh-TW":"Traditional Chinese",ja:"Japanese",ko:"Korean",fr:"French",de:"German",es:"Spanish",pt:"Portuguese",ru:"Russian",ar:"Arabic",hi:"Hindi",th:"Thai",vi:"Vietnamese",id:"Indonesian",ms:"Malay",tr:"Turkish",it:"Italian",nl:"Dutch",pl:"Polish"};function t(t,n,a){return{system:"You are a professional translator specializing in networking and smart home device interfaces. You translate UI elements for TP-Link products including routers, switches, access points, smart plugs, cameras, and IoT devices.\n\nCRITICAL TRANSLATION RULES:\n1. NEVER add quotes, brackets, or any extra formatting around the translation\n2. Output ONLY the translated text, nothing else\n3. Maintain exact formatting, capitalization patterns, and punctuation\n4. Preserve technical terms, model numbers, and brand names\n5. Keep all symbols, special characters, and spacing identical\n6. Translate UI labels using standard industry terminology\n7. For networking terms, use established Chinese technical vocabulary\n8. For smart home features, use commonly accepted Chinese terms",user:`Translate this TP-Link interface element from ${e[n]||n} to ${e[a]||a}.\n\nContext: This is UI text from TP-Link networking/smart home products (routers, switches, smart devices, mobile apps, web interfaces).\n\nFORMATTING RULES:\n- Preserve ALL original formatting exactly\n- Keep currency symbols unchanged (¥ → ¥, $ → $, € → €)\n- Keep numbers, IPs, MACs, model numbers exactly as-is\n- Maintain punctuation, spacing, and special characters\n- Preserve button/menu capitalization patterns\n- Keep technical abbreviations (WiFi, LED, USB, etc.)\n\nTERMINOLOGY GUIDELINES:\n- Use standard networking terminology (路由器, 交换机, 接入点)\n- Use established smart home terms (智能插座, 智能摄像头)\n- Keep brand/product names in English (TP-Link, Archer, Deco)\n- Use professional technical language, not casual terms\n\nText to translate: "${t}"`}}function n(t,n,a){return`Translate this TP-Link product interface text from ${e[n]||n} to ${e[a]||a}.\n\nCONTEXT: TP-Link networking and smart home device UI translation\n- Products: Routers, switches, access points, smart plugs, cameras, IoT devices\n- Interfaces: Mobile apps, web management panels, device displays\n\nCRITICAL OUTPUT RULES:\n✓ Output ONLY the translated text\n✗ DO NOT add quotes, brackets, or extra formatting\n✗ DO NOT add explanations or notes\n✗ DO NOT repeat the original text\n\nFORMATTING PRESERVATION:\n- Keep exact spacing, punctuation, and capitalization\n- Preserve numbers, IPs, model codes unchanged\n- Maintain currency symbols (¥ stays ¥, $ stays $)\n- Keep technical abbreviations (WiFi, USB, LED, etc.)\n- Preserve special characters and symbols\n\nNETWORKING TERMINOLOGY (English → Chinese):\n- Router → 路由器\n- Switch → 交换机  \n- Access Point → 接入点\n- WiFi → WiFi (keep as-is)\n- Ethernet → 以太网\n- Bandwidth → 带宽\n- Firewall → 防火墙\n- Port → 端口\n- Signal → 信号\n\nSMART HOME TERMINOLOGY:\n- Smart Plug → 智能插座\n- Smart Camera → 智能摄像头\n- Smart Switch → 智能开关\n- Motion Detection → 动作检测\n- Night Vision → 夜视功能\n- Remote Control → 远程控制\n\nBRAND/PRODUCT PRESERVATION:\n- Keep "TP-Link", "Archer", "Deco", "Tapo" in English\n- Keep model numbers unchanged (e.g., "AC1900", "AX6000")\n\nOriginal text: "${t}"\n\nTranslation:`}class a{async translateText(e,t,n,a,s){console.log(`Translating with ${a}:`,{text:e,sourceLang:t,targetLang:n});try{if("openai"===a)return await this.translateWithOpenAI(e,t,n,s);if("gemini"===a)return await this.translateWithGemini(e,t,n,s);throw new Error(`Unsupported engine: ${a}`)}catch(e){throw console.error("Translation error:",e),e}}async translateWithOpenAI(e,n,a,s){var i,r,o,l,c,g,d;const p=s.model||"gpt-3.5-turbo-instruct";if(!p.includes("instruct")){const c=t(e,n,a),g=await fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{Authorization:`Bearer ${s.apiKey}`,"Content-Type":"application/json"},body:JSON.stringify({model:p,messages:[{role:"system",content:c.system},{role:"user",content:c.user}],max_tokens:500,temperature:.1})});if(!g.ok){const e=await g.json();throw new Error(`OpenAI API error: ${e.error&&e.error.message||g.statusText}`)}const d=null===(l=null===(o=null===(r=null===(i=(await g.json()).choices)||void 0===i?void 0:i[0])||void 0===r?void 0:r.message)||void 0===o?void 0:o.content)||void 0===l?void 0:l.trim();if(!d)throw new Error("No translation returned from OpenAI Chat API");return d}{const i=t(e,n,a),r=`${i.system}\n\n${i.user}`,o=await fetch("https://api.openai.com/v1/completions",{method:"POST",headers:{Authorization:`Bearer ${s.apiKey}`,"Content-Type":"application/json"},body:JSON.stringify({model:p,prompt:r,max_tokens:500,temperature:.1,stop:["\\n\\n","Original:","Context:"]})});if(!o.ok){const e=await o.json();throw new Error(`OpenAI API error: ${e.error&&e.error.message||o.statusText}`)}const l=null===(d=null===(g=null===(c=(await o.json()).choices)||void 0===c?void 0:c[0])||void 0===g?void 0:g.text)||void 0===d?void 0:d.trim();if(!l)throw new Error("No translation returned from OpenAI Completions API");return l}}async translateWithGemini(e,t,a,s){var i,r,o,l,c,g;const d=n(e,t,a),p=await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${s.model}:generateContent?key=${s.apiKey}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({contents:[{parts:[{text:d}]}],generationConfig:{temperature:.05,maxOutputTokens:500,stopSequences:['"','""',"```"],topP:.8,topK:10}})});if(!p.ok){const e=await p.json();throw new Error(`Gemini API error: ${e.error&&e.error.message||p.statusText}`)}let h=null===(g=null===(c=null===(l=null===(o=null===(r=null===(i=(await p.json()).candidates)||void 0===i?void 0:i[0])||void 0===r?void 0:r.content)||void 0===o?void 0:o.parts)||void 0===l?void 0:l[0])||void 0===c?void 0:c.text)||void 0===g?void 0:g.trim();if(!h)throw new Error("No translation returned from Gemini");return h=h.replace(/^["'`]+|["'`]+$/g,"").replace(/^\*\*|\*\*$/g,"").replace(/^\*|\*$/g,"").replace(/^```[\w]*\n?|\n?```$/g,"").trim(),h}buildOptimizedPrompt(e,t,a){return n(e,t,a)}async testConnection(e,t){try{return await this.translateText("Hello","en","zh-CN",e,t),!0}catch(e){return console.error("Connection test failed:",e),!1}}}class s{findTextNodesInNode(e){const t=[];if("TEXT"===e.type)t.push(e);else if("children"in e)for(const n of e.children)t.push(...this.findTextNodesInNode(n));return t}getSelectedTextNodes(){const e=[];for(const t of figma.currentPage.selection)if("TEXT"===t.type)e.push(t);else{const n=this.findTextNodesInNode(t);e.push(...n)}return e.filter((e,t,n)=>n.findIndex(t=>t.id===e.id)===t)}getSelectionInfo(){const e=figma.currentPage.selection,t=this.getSelectedTextNodes();return console.log(`Selection analysis: ${e.length} total nodes, found ${t.length} text nodes`),{totalNodes:e.length,textNodes:t.length,nodeIds:t.map(e=>e.id),textContents:t.map(e=>e.characters||""),containerInfo:e.map(e=>({id:e.id,type:e.type,name:e.name,hasChildren:"children"in e?e.children.length:0}))}}async applyTranslation(e,t,n){let a;try{a=figma.getNodeById(e)}catch(t){a=figma.currentPage.findOne(t=>t.id===e)}if(!a||"TEXT"!==a.type)throw new Error("Node not found or not a text node");switch(await figma.loadFontAsync(a.fontName),n){case"replace":a.characters=t;break;case"beside":await this.createBesideText(a,t);break;case"newFrame":await this.createFrameWithTranslation(a,t);break;case"newPage":await this.createPageWithTranslation(a,t);break;default:throw new Error(`Unsupported mode: ${n}`)}}async createBesideText(e,t){const n=e.clone();n.characters=t,n.x=e.x+e.width+20;const a=e.fills.slice();a.length>0&&"SOLID"===a[0].type&&(a[0]=Object.assign({},a[0],{color:{r:0,g:.5,b:0}}),n.fills=a)}async createFrameWithTranslation(e,t){const n=figma.createFrame();n.name="Translation Frame",n.x=e.x+e.width+50,n.y=e.y;const a=e.clone();a.x=0,a.y=0,n.appendChild(a);const s=e.clone();s.characters=t,s.x=0,s.y=a.height+10,n.appendChild(s),n.resize(Math.max(a.width,s.width)+20,a.height+s.height+30),n.backgrounds=[{type:"SOLID",color:{r:.95,g:.95,b:.95}}]}async createPageWithTranslation(e,t){const n=figma.createPage();n.name=`Translation - ${(new Date).toLocaleString()}`;const a=e.clone();a.x=100,a.y=100,n.appendChild(a);const s=e.clone();s.characters=t,s.x=100,s.y=a.y+a.height+50,n.appendChild(s)}getAvailableFonts(){return["Inter","Roboto","Arial","Helvetica"]}}class i{constructor(){this.isTranslating=!1,this.translationEngine=new a,this.figmaService=new s}async handleMessage(e){console.log("Handling message:",e.type);try{switch(e.type){case"get-selection":return{type:"selection-info",payload:this.figmaService.getSelectionInfo()};case"select-all-text":return await this.handleSelectAllText();case"start-translation":return await this.handleOptimizedTranslation(e.payload);case"cancel-translation":return this.isTranslating=!1,{type:"translation-cancelled"};case"apply-translation":return await this.handleApplyTranslation(e.payload);case"test-engine":return await this.handleTestEngine(e.payload);case"save-settings":return await this.handleSaveSettings(e.payload);case"load-settings":return await this.handleLoadSettings();case"locate-node":return await this.handleLocateNode(e.payload);case"rollback-all-translations":return await this.handleRollbackAllTranslations(e.payload);case"update-translation":return await this.handleUpdateTranslation(e.payload);default:return console.log("Unknown message type:",e.type),null}}catch(e){return console.error("Message handling error:",e),{type:"error",payload:{error:e.message}}}}async handleOptimizedTranslation(e){if(this.isTranslating)throw new Error("Translation already in progress");this.isTranslating=!0;const{engine:t,sourceLang:n,targetLang:a,mode:s,nodeIds:i,config:r}=e,o=[];let l=0,c=0;try{const e=r,g=3,d=[];for(let e=0;e<i.length;e+=g)d.push(i.slice(e,e+g));let p=0;for(const r of d){if(!this.isTranslating)break;const g=r.map(async i=>await this.translateSingleNode(i,t,n,a,s,e)),d=await Promise.all(g);for(const e of d)o.push(e),"success"===e.status?l++:c++,this.postMessage({type:"translation-result",payload:e});p+=r.length,this.postMessage({type:"translation-progress",payload:{progress:p/i.length*100}}),p<i.length&&await new Promise(e=>setTimeout(e,300))}return this.isTranslating=!1,{type:"translation-complete",payload:{results:o,successCount:l,failureCount:c}}}catch(e){throw this.isTranslating=!1,e}}async translateSingleNode(e,t,n,a,s,i){let r;try{r=figma.getNodeById(e)}catch(t){r=figma.currentPage.findOne(t=>t.id===e)}if(!r||"TEXT"!==r.type)return{nodeId:e,originalText:"",translatedText:"",status:"error",error:"Node not found or not a text node",applied:!1};const o=r.characters||"";try{const r=await this.translationEngine.translateText(o,n,a,t,i),l={nodeId:e,originalText:o,translatedText:r,status:"success",applied:!1};return l.applied=await this.applyTranslationWithRetry(e,r,s,3),l}catch(t){return{nodeId:e,originalText:o,translatedText:"",status:"error",error:t.message,applied:!1}}}async handleSelectAllText(){try{const e=figma.currentPage.findAll(e=>"TEXT"===e.type);return figma.currentPage.selection=e,{type:"selection-info",payload:{totalNodes:e.length,textNodes:e.length,nodeIds:e.map(e=>e.id),textContents:e.map(e=>e.characters||"")}}}catch(e){return{type:"error",payload:{error:e.message}}}}async applyTranslationWithRetry(e,t,n,a=3,s=1e3){for(let i=1;i<=a;i++)try{return await this.figmaService.applyTranslation(e,t,n),console.log(`Translation applied successfully on attempt ${i}`),!0}catch(e){if(console.warn(`Failed to apply translation (attempt ${i}/${a}):`,e.message),i<a){const e=s*Math.pow(1.5,i-1);console.log(`Retrying in ${e}ms...`),await new Promise(t=>setTimeout(t,e))}}return console.error(`Failed to apply translation after ${a} attempts`),!1}async handleApplyTranslation(e){try{const t=await this.applyTranslationWithRetry(e.nodeId,e.translatedText,e.mode,3);return{type:"apply-result",payload:{success:t,nodeId:e.nodeId,error:t?null:"Failed to apply translation after retries"}}}catch(n){return{type:"apply-result",payload:{success:!1,nodeId:e.nodeId,error:n.message}}}}async handleTestEngine(e){try{const t=await this.translationEngine.testConnection(e.engine,e.config);return{type:"engine-test-result",payload:{engine:e.engine,success:t,error:t?null:"Connection test failed"}}}catch(t){return{type:"engine-test-result",payload:{engine:e.engine,success:!1,error:t.message}}}}async handleSaveSettings(e){try{return e.engines&&await figma.clientStorage.setAsync("translationEngines",e.engines),e.settings&&await figma.clientStorage.setAsync("pluginSettings",e.settings),e.translationMemories&&await figma.clientStorage.setAsync("translationMemories",e.translationMemories),console.log("Settings saved successfully"),{type:"settings-save-result",payload:{success:!0}}}catch(e){return console.error("Failed to save settings:",e),{type:"settings-save-result",payload:{success:!1,error:e.message}}}}async handleLoadSettings(){try{const e=await figma.clientStorage.getAsync("translationEngines")||{openai:{enabled:!1,apiKey:"",model:"gpt-3.5-turbo-instruct"},gemini:{enabled:!1,apiKey:"",model:"gemini-pro"}},t=await figma.clientStorage.getAsync("pluginSettings")||{defaultTargetLang:"zh-CN"},n=await figma.clientStorage.getAsync("translationMemories")||[];return console.log("Settings loaded successfully"),{type:"settings-loaded",payload:{engines:e,settings:t,translationMemories:n}}}catch(e){return console.error("Failed to load settings:",e),{type:"settings-load-error",payload:{error:e.message}}}}async handleLocateNode(e){try{const{nodeId:t}=e;let n;try{n=figma.getNodeById(t)}catch(e){n=figma.currentPage.findOne(e=>e.id===t)}if(!n)return{type:"locate-result",payload:{success:!1,error:"Node not found"}};figma.currentPage.selection=[n],figma.viewport.scrollAndZoomIntoView([n]);const a=n.absoluteTransform[0][2],s=n.absoluteTransform[1][2],i=Math.max(n.width,n.height),r=Math.min(Math.max(.5,1e3/i),3);return figma.viewport.zoom=r,setTimeout(()=>{figma.viewport.center={x:a+n.width/2,y:s+n.height/2}},100),{type:"locate-result",payload:{success:!0,nodeId:t,position:{x:a,y:s},size:{width:n.width,height:n.height}}}}catch(e){return{type:"locate-result",payload:{success:!1,error:e.message}}}}async handleRollbackAllTranslations(e){try{const{results:t}=e;let n=0,a=0;for(const e of t){try{let t;try{t=figma.getNodeById(e.nodeId)}catch(n){t=figma.currentPage.findOne(t=>t.id===e.nodeId)}if(t&&"TEXT"===t.type){await figma.loadFontAsync(t.fontName),t.characters=e.originalText,n++}else a++}catch(e){console.error(`Failed to rollback node ${e.nodeId}:`,e.message),a++}}return{type:"rollback-complete",payload:{successCount:n,failureCount:a}}}catch(e){return console.error("Rollback error:",e),{type:"error",payload:{error:e.message}}}}async handleUpdateTranslation(e){try{const{nodeId:t,translatedText:n,mode:a}=e,s=await this.applyTranslationWithRetry(t,n,a||"replace",3);return{type:"update-translation-result",payload:{success:s,nodeId:t,error:s?null:"Failed to update translation"}}}catch(e){return{type:"update-translation-result",payload:{success:!1,nodeId:e.nodeId,error:e.message}}}}postMessage(e){figma.ui.postMessage(e)}}class r{constructor(){this.messageHandler=new i,this.figmaService=new s}async initialize(){console.log("Initializing optimized plugin..."),this.setupUI(),this.setupMessageHandling(),this.setupEventListeners(),this.postMessage({type:"plugin-ready",payload:{version:"1.1.8",selection:this.figmaService.getSelectionInfo()}}),console.log("Optimized plugin initialized successfully")}setupUI(){figma.showUI(__html__,{width:380,height:600,title:"TP Translator"})}setupMessageHandling(){figma.ui.onmessage=async e=>{try{console.log("Received message:",e.type);const t=await this.messageHandler.handleMessage(e);t&&this.postMessage(t)}catch(e){console.error("Message handling error:",e),this.postMessage({type:"error",payload:{error:e.message}})}}}setupEventListeners(){figma.on("selectionchange",()=>{const e=this.figmaService.getSelectionInfo();this.postMessage({type:"selection-changed",payload:e})}),figma.on("currentpagechange",()=>{this.postMessage({type:"page-changed",payload:{pageId:figma.currentPage.id,pageName:figma.currentPage.name}})}),figma.on("close",()=>{console.log("Plugin closing...")})}postMessage(e){figma.ui.postMessage(e),console.log("Sent message:",e.type)}}const o=(e,t)=>{console.error(`Error in ${t}:`,e),figma.ui&&figma.ui.postMessage({type:"error",payload:{error:e.message,context:t}})};async function l(){try{const e=new r;await e.initialize()}catch(e){o(e,"main initialization")}}const c={"open-translator":async()=>{await l()},"quick-translate":async()=>{await l(),setTimeout(()=>{figma.ui.postMessage({type:"auto-translate",payload:{engine:"openai",sourceLang:"auto",targetLang:"zh-CN"}})},1e3)},"open-settings":async()=>{await l(),setTimeout(()=>{figma.ui.postMessage({type:"show-settings"})},500)}};figma.command&&c[figma.command]?c[figma.command]().catch(e=>{o(e,`command: ${figma.command}`)}):l().catch(e=>{o(e,"default startup")}),console.log("Optimized production plugin script loaded")})();
//# sourceMappingURL=code.js.map